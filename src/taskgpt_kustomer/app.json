{
  "app": "taskgpt",
  "version": "2.0.0",
  "description": "TaskGPT is a proprietary, secure GenAI platform powering a range of tools to help customer service teams deliver superior customer experiences. Its key real-time features enhance operational efficiency, decrease Average Handling Time (AHT), reduce human errors, boost accuracy and quality and increase consistency.\nTaskGPT does not store users' personal data, sensitive information or any other confidential data.\n\n### Tools:\n\n### Assist<sup>AI</sup>\n\n### A way to drive next-level CX, securely\nFormerly known as “TaskGPT KnowledgeAssist,” AssistAI digitizes and automates the customer experience through customized, contextually relevant responses tailored to your organization’s data and historical customer interaction.\nPowered by the TaskGPT platform, **Assist<sup>AI</sup>** is trained only on your existing knowledge base—documents such as FAQs, product manuals, policies, and any other information a teammate might need to answer customer queries or complete tasks.\n\n### Empower teams with instant knowledge and confidence\nWhen a representative sends a query, the tool analyzes it and then dives into the knowledge library to find the right answer. By understanding language context and recognizing intent, AssistAI provides concise responses, quickly.\nWhether interacting through email, chat, voice calls, in-app messaging, or SMS, AssistAI maintains consistency and quality in every customer exchange. It augments human capabilities, allowing your teams to tackle customer queries with the confidence that comes from having an AI-powered chatbot at their side.\n\n### Top benefits:\n* ### Decrease AHT\n* ### Improve interaction quality\n* ### Increase productivity\n* ### Increase efficiency\n* ### Boost CSAT\n* ### Boost ESAT\n* ### Decrease ACW\n* ### Ensure data security\n\n### Seamless integration\nAssistAI is compatible with our current infrastructure because it can work in any web environment, integrate smoothly with top CRMs like Zendesk, Salesforce and HubSpot, and mask sensitive information (PII).\n\n### Prompt<sup>AI</sup>\n### Chat excellence with precise response suggestions\nPrompt<sup>AI</sup> is a tool that suggests chat responses in real-time, eliminating the traditional time-consuming process of manually searching knowledge bases and free-writing responses.\n\nWhen a customer asks a question, PromptAI automatically searches for relevant information and suggests three responses with a corresponding confidence score. Teammates can quickly choose and modify as needed. The tool also measures response rate (how often a teammate picks a response) to enable constant response improvement.\n\n### Top benefits:\n\n* Increased efficiency\n* Decreased AHT\n* Higher CSAT",
  "commands": [
    {
      "name": "login_api",
      "displayName": "Login",
      "url": "https://orchestrator.taskus.com/api/settings/usercheck?app=PromptoGPT",
      "cacheSeconds": 15,
      "httpMethod": "post"
    },
    {
      "name": "setting_api",
      "displayName": "Setting",
      "url": "https://orchestrator.taskus.com/api/settings/get?app=PromptoGPT",
      "cacheSeconds": 15,
      "httpMethod": "post",
      "appSettings": {
        "aapikey": {
          "key": "taskgpt.default.taskgpt_apikey"
        },
        "aauthtoken": {
          "key": "taskgpt.default.taskgpt_authtoken"
        }
      }
    },
    {
      "name": "generate_authtoken_api",
      "displayName": "Generatetoken",
      "url": "https://orchestrator.taskus.com/api/external/user/authToken?userInfo=true&assginedChatbots=true&clientToken=true&userAuthToken=true&externalClientType=chrome_extension&generateNewSessionId=true&authorAIInstances=true&promptAIInstances=true&app=PromptoGPT",
      "cacheSeconds": 15,
      "httpMethod": "post"
    },
    {
      "name": "auto_suggest_api",
      "displayName": "Autosuggest",
      "url": "https://taskgpt-access.taskus.com/api/responses/auto_suggest",
      "cacheSeconds": 15,
      "httpMethod": "post"
    },
    {
      "name": "logs_api",
      "displayName": "Logsapi",
      "url": "https://orchestrator.taskus.com/api/event/create?app=PromptoGPT",
      "cacheSeconds": 15,
      "httpMethod": "post"
    },
    {
      "name": "exhealth_check_api",
      "displayName": "Exhealth Api",
      "url": "https://orchestrator.taskus.com/api/settings/6/exthealth",
      "cacheSeconds": 15,
      "httpMethod": "post"
    },
    {
      "name": "refresh_token",
      "displayName": "Refresh Api",
      "url": "https://orchestrator.taskus.com/api/user/refreshToken",
      "cacheSeconds": 15,
      "httpMethod": "post"
    }
  ],
  "settings": {
    "default": {
      "taskgpt_authtoken": {
        "type": "secret",
        "defaultValue": "",
        "description": "EXTERNAL TaskGPT AUTH TOKEN"
      },
      "taskgpt_apikey": {
        "type": "secret",
        "defaultValue": "",
        "description": "External TaskGPT API Key"
      },
      "taskgpt_url": {
        "type": "string",
        "defaultValue": "https://taskgpt-access.taskus.com",
        "description": "External TaskGPT URL"
      }
    }
  },
  "appDetails": {
    "appDeveloper": {
      "name": "TaskUs",
      "website": "https://www.taskus.com/",
      "supportEmail": "TaskGPT@taskus.com"
    },
    "externalPlatform": {
      "name": "TaskUs",
      "website": "https://www.taskus.com/"
    }
  },
  "changelog": {
    "2.0.0": "{{November 2024}}What's New \n-   We've added the AuthorAI feature to the TaskGPT application."
  },
  "title": "TaskGPT",
  "postInstallMessage": "Congratulations! You've installed TaskGPT app!",
  "kviews": [
    {
      "name": "taskgpt",
      "template": "\n        if (appSettings && appSettings.default) {\n            const { useState, useEffect, useRef } = React;   \n\n            const createPayload = (module, action) => {\n                return [\n                {\n                    module: module,\n                    event: action,\n                },\n                ];\n            };         \n                \n            async function logsAPI({ isAuthuu, setting_token, user_setting, PAYLOAD_FOR_EVENT, UUID = null, log_message = null }) {\n                let app_version = \"2.0.0\"\n                try {\n                let endpoint = '/v1/commands/' + isAuthuu.appId + '.app.logs_api/run'\n                let auth = 'Bearer' + \" \" + setting_token;\n                await KustomerRequest({\n                    url: endpoint,\n                    method: 'POST',\n                    body: {\n                    \"headers\": {\n                        \"Authorization\": auth,\n                        \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                        \"user_email\": user_setting.email,\n                        \"applicationName\": \"PromptoGPT\",\n                        \"event_list\": PAYLOAD_FOR_EVENT,\n                        \"user_id\": user_setting.user_id,\n                        \"app_id\": user_setting.app_id,\n                        \"app_name\": \"PromptoGPT\",\n                        \"campaign_name\": user_setting.campaign_name,\n                        \"campaign_id\": user_setting.campaign_id,\n                        \"lob_id\": user_setting.lob_id,\n                        \"lob_name\": user_setting.lob_name,\n                        \"currentUserAppVersion\": app_version,\n                        \"uuid\": UUID,\n                        \"log_message\": log_message\n                    }\n                    }\n                },\n                    (err, response) => {\n                    if (err) {\n                        console.log(\"Into 1\")\n                        return 'Failed to process return'\n                    } else if (response.responseBody.errors) {\n                        console.log(\"Into 2\")\n                        return response.responseBody.errors.message;\n                    }\n                    }\n                );\n                } catch (error) {\n                console.log(\"Error in logsAPI::\", error);\n                }\n            }\n\n            const AuthorAIComponent = window.__authorAIComponent12345 || (window.__authorAIComponent12345 =\n                function AuthorAIComponent(props) {\n                    const {\n                    conversation,\n                    appSettings\n                    } = props;\n\n                    const [isLoggedStatus, setLoggedStatus] = useState(sessionStorage.getItem('authorAILoggedIn') === 'true');\n                    const [isSettingStatus, setSettingStatus] = useState(sessionStorage.getItem('authorAIStatus') === 'true');\n                    const [name, changeName] = useState('');\n                    const [ischeckboxType, setCheckboxType] = useState('');\n                    const [isLoading, setLoading] = useState(false);\n                    const [prompt_res, setPrompt_res] = useState(null);\n                    const [isApiCall, setApiCall] = useState(true);\n                    const [generateToken, setGenerateToken] = useState({});\n                    const [conv_id, setConv_id] = useState('');\n                    const [isEmail, setEmail] = useState('');\n                    const [isAuthuu, setAuthuu] = useState({});\n                    const[lastUserRes, setLastUserRes] = useState('');\n                    const[settingreg, setSettingreg] = useState({});\n                    const [isAutoLoading, setAutoLoading] = useState(false);\n                    const [copied, setCopied] = useState(null);\n                    const [channelType, setChannelType] = useState(null);                \n                    const [selectedText, setSelectedText] = useState('');\n                    const [isSelecting, setSelecting] = useState(false);\n                    const [postShortcutLoading, setPostShortcutLoading] = useState(false);\n                    const [textArea, setTextArea] = useState('');\n                    const [postpreConfig, setPostpreConfig] = useState({});\n                    const [selections, setSelections] = useState([]);\n                    const scrollRef = useRef(null);  // Ref to handle automatic scroll\n                    const prevSelectionCount = useRef(selections.length); // Track previous selection count\n                    const [postOrPreOnloading, setPostOrPreOnloading] = useState({\n                        postOnloading: false,\n                        preOnloading: false,\n                        textData: \"\"\n                    });\n                    const [preShortcuts, setPreShortcuts] = useState({\n                        preOnloading: false,\n                        preShortcutOption: \"\",\n                        dropdownOptions: {},\n                        subDropdownOptions: {},\n                        temp_json: {}\n                    });\n                    const [likedState, setLikedState] = useState({});\n                    const [dislikedState, setDislikedState] = useState({});\n                    const [user_setting_state, setUser_setting_state] = useState({\n                        refreshToken: \"\",\n                        settingResponse: {},\n                        setting_token: \"\"\n                    });\n                    const [promptoRes, setPromptoRes] = useState({});\n                    const [toneWriting, setToneWriting] = useState({\n                        selected_tone: \"soft\", // Default value for tone\n                        selected_writing_style: \"professional\"\n                    });\n                    const [isOpen, setIsOpen] = useState(false);\n                    const [selectedItems, setSelectedItems] = useState({}); // Set first item as default\n\n                    function generateUUID() {\n                        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                            const r = (Math.random() * 16) | 0;\n                            const v = c === 'x' ? r : (r & 0x3) | 0x8;\n                            return v.toString(16);\n                        });\n                    }\n\n                    //generate Auth Token API\n                    async function generateTokenApi(user_setting_response, emailId, isAuthuu) {\n                        try {\n                        const model_type = user_setting_response.settings.Zendesk_PromptoGPT_modeltype;\n                        const usecase = user_setting_response.settings.Zendesk_PromptoGPT_usecase;\n\n                        const promptoGPT_toggle = user_setting_response.settings.Zendesk_PromptoGPT_toggle;\n                        const knowledgeAssist_toggle = user_setting_response.settings.Zendesk_KnowledgeAssist_toggle;\n                        const authorAI_toggle = user_setting_response.settings.Kustomer_AuthorAI;\n\n                        const apitoken = user_setting_response?.settings.x_apitoken;\n                        const apikey = user_setting_response?.settings.x_apikey;\n                        const keyValue=\"Bearer\"+\" \"+user_setting_response?.authToken;\n                        let endpoint = '/v1/commands/' + isAuthuu.appId + '.app.generate_authtoken_api/run';\n                        let authResponse = await KustomerRequest({\n                            url: endpoint,\n                            method: 'POST',\n                            body: {\n                                \"headers\": {\n                                    \"Content-Type\": \"application/json\",\n                                    \"x-apitoken\": apitoken,\n                                    \"x-apikey\": apikey,\n                                    \"CF-Access-Client-Id\": user_setting_response?.settings.CF_Access_Client_Id,\n                                    \"CF-Access-Client-Secret\": user_setting_response?.settings.CF_Access_Client_Secret,\n                                    \"Authorization\": keyValue\n                                },\n                                // headers: dev_headers,\n                                \"body\": {\n                                    \"email\": emailId,\n                                    \"environment\": \"prod\"\n                                }\n                            }\n                        },\n                            (err, response) => {\n                            if (err) {\n                                console.log(\"Into 1\")\n                                return 'Failed to process return'\n                            } else if (response.responseBody.errors) {\n                                console.log(\"Into 2\")\n                                return response.responseBody.errors.message;\n                            }\n                            }\n                        );\n                        const data = authResponse?.data?.attributes?.responseBody;\n                        const authToken = data.authToken;\n                        const clientAuthToken = data.clientAuthToken;\n                        const authorAIInstance = data?.authorAIInstances\n                        setLoading(false);\n                        setSettingStatus(true);\n                        return { authToken, clientAuthToken, model_type, usecase, promptoGPT_toggle, knowledgeAssist_toggle, authorAI_toggle, authorAIInstance }\n                        } catch (err) {\n                        console.log(\"Error in generateTokenApi::\", err);\n                        }\n                    }  \n\n                    // Handle like click\n                    const handleLikeClick = async (index, selectionDataItem) => {\n                        setLikedState(prevState => ({\n                            ...prevState,\n                            [index]: !prevState[index] // Toggle like state for the specific item\n                        }));\n\n                        setDislikedState(prevState => ({\n                            ...prevState,\n                            [index]: false // Ensure the corresponding dislike is reset for the same item\n                        }));\n\n                        let unique_uuid = generateUUID();\n                        const log_payload = createPayload(\n                            'Kustomer_AuthorAI_clicked_star_rating',\n                            'Success'\n                        );\n                        let thumbs_up_msg = \"Rating: Thumbs up API response: \" + \" \" + selectionDataItem?.originalData;\n                        await logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: log_payload, UUID: unique_uuid, log_message: thumbs_up_msg });\n                    }\n\n                    // Handle dislike click\n                    const handleDislikeClick = async (index, selectionDataItem) => {\n                        setDislikedState(prevState => ({\n                            ...prevState,\n                            [index]: !prevState[index] // Toggle dislike state for the specific item\n                        }));\n\n                        setLikedState(prevState => ({\n                            ...prevState,\n                            [index]: false // Ensure the corresponding like is reset for the same item\n                        }));\n\n                        let unique_uuid = generateUUID();\n                        const log_payload = createPayload(\n                            'Kustomer_AuthorAI_clicked_star_rating',\n                            'Success'\n                        );\n                        let thumbs_down_msg = \"Rating: Thumbs down API response: \" + \" \" + selectionDataItem?.originalData;\n                        await logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: log_payload, UUID: unique_uuid, log_message: thumbs_down_msg });\n                    };                    \n\n                    const highlightHeadings = (text) => {\n                        // Ensure the input is a string\n                        if (typeof text !== 'string') {\n                            \n                            return null; // Or return an empty fragment\n                        }\n\n                        return text.split(\" \").map((e, index) => {\n                            if (e.match(/[a-zA-Z]+:/)) {\n                                // Return a bolded span element for headings\n                                return <span key={index} style={{ fontWeight: \"bold\" }}>{e} </span>;\n                            } else {\n                                // Return the regular word in a span\n                                return <span key={index}>{e} </span>;\n                            }\n                        });\n                    };\n\n                    //api's\n                    async function postPreAutoSuggestApi(payload, isAuthuu) {\n                        setAutoLoading(true);\n                        let unique_uuid = generateUUID();\n                        const log_payload = createPayload(\n                            'Kustomer_AuthorAI_Request_Query_Started',\n                            'Success'\n                        );\n                        let query_msg = \"Query - \" + payload.body?.question;\n                        await logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: log_payload, UUID: unique_uuid, log_message: query_msg });\n\n                        try {\n                            let endpoint = '/v1/commands/' + isAuthuu.appId + '.app.auto_suggest_api/run';\n                            let response = await KustomerRequest({\n                                url: endpoint,\n                                method: \"POST\",\n                                body: {\n                                    \"headers\": payload?.headers,\n                                    \"body\": payload.body\n                                }\n                            },\n                                (err, response) => {\n                                    if (err) {\n                                        console.log(\"Into 1\")\n                                        return 'Failed to process return'\n                                    } else if (response.responseBody.errors) {\n                                        console.log(\"Into 2\")\n                                        return response.responseBody.errors.message;\n                                    }\n                                }\n                            );\n                            if (response?.data?.attributes?.responseBody) {\n                                let unique_uuid_complete = generateUUID();\n                                const log_payload_completed = createPayload(\n                                    'Kustomer_AuthorAI_Request_Query_Response_Generate_Completed',\n                                    'Success'\n                                );\n                                let res_msg = \"Received the API response - \" + response?.data?.attributes?.responseBody?.answer;\n                                await logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: log_payload_completed, UUID: unique_uuid_complete, log_message: res_msg });\n                                \n                                setAutoLoading(false);\n                                setSelectedText('');\n                                setTextArea('');\n                                setPreShortcuts({\n                                    ...preShortcuts,\n                                    preOnloading: false,\n                                    preShortcutOption: \"\"\n                                });\n                                let formattedResponseData;\n                                if (payload?.body?.usecase == \"summarize\" || payload?.body?.usecase == \"fix_spelling_grammar\" || payload?.body?.usecase == \"helping_pronunce\") {\n                                    formattedResponseData = highlightHeadings(response?.data?.attributes?.responseBody?.answer);\n                                } else {\n                                    formattedResponseData = response?.data?.attributes?.responseBody?.answer;\n                                }\n                                // let useCaseOption = findUseCaseOption(response?.data?.attributes?.responseBody);\n                                setPostpreConfig({\n                                    ...postpreConfig,\n                                    // postpreResponse: responseData\n                                    postpreResponse: formattedResponseData\n                                });\n                                setToneWriting({\n                                    selected_tone: \"soft\", // Default value for tone\n                                    selected_writing_style: \"professional\"\n                                });\n                                setPostOrPreOnloading({ ...postOrPreOnloading, textData: payload.body?.question })\n                                let originalData = response?.data?.attributes?.responseBody?.answer;\n                                let showText = payload.body?.question;\n                                let res_useCase_option = {\n                                    usecase: payload?.body?.usecase,\n                                    useCaseOption: payload?.body?.usecase_options\n                                }\n                                let category = payload?.category;\n                                setSelections((prevSelections) => [\n                                    ...prevSelections,\n                                    { showText, formattedResponseData, originalData, res_useCase_option, category }\n                                ]);\n                                setIsOpen(false);\n                                setSelectedItems({})\n                                return response?.data?.attributes?.responseBody;\n                            }\n                        } catch (error) {\n                            console.log(\"Error in postPreAutoSuggestApi::\", error)\n                        }\n                    }\n\n                    async function autoSuggestApi(user_email, latestmsgfromuser, model_type, use_case, auth_token, isAuthuu, user_setting_infos, setting_token) {\n                        setAutoLoading(true);\n                        let unique_uuid = generateUUID();\n                        const payload = createPayload(\n                            'Kustomer_PromptoGPT_Request_Query_Started',\n                            'Success'\n                        );\n                        await logsAPI({isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: user_setting_infos, PAYLOAD_FOR_EVENT: payload, UUID: unique_uuid });\n                        try {\n                            let endpoint = '/v1/commands/' + isAuthuu.appId + '.app.auto_suggest_api/run';\n                            let response = await KustomerRequest({\n                            url: endpoint,\n                            method: \"POST\",\n                            body: {\n                                \"headers\": {\n                                    \"Content-Type\": \"application/json\",\n                                    \"X-Authtoken\": auth_token,\n                                    \"CF-ACCESS-CLIENT-ID\": settingreg?.CF_Access_Client_Id,\n                                    \"CF-ACCESS-CLIENT-SECRET\": settingreg?.CF_Access_Client_Secret\n                                },\n                                \"body\": {\n                                    \"user_id\": user_email,\n                                    \"question\": latestmsgfromuser,\n                                    \"model_type\": model_type.toLowerCase(),\n                                    \"usecase\": use_case.toLowerCase(),\n                                    \"enable_automasking\": true\n                                }\n                            }\n                            },\n                            (err, response) => {\n                                if (err) {\n                                    console.log(\"Into 1\")\n                                    return 'Failed to process return'\n                                } else if (response.responseBody.errors) {\n                                    console.log(\"Into 2\")\n                                    return response.responseBody.errors.message;\n                                }\n                            }\n                            );\n                            if (response?.data?.attributes?.responseBody) {\n                                let unique_uuid = generateUUID();\n                                const payload = createPayload(\n                                    'Kustomer_PromptoGPT_Request_Query_Completed',\n                                    'Success'\n                                );\n                                await logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: user_setting_infos, PAYLOAD_FOR_EVENT: payload, UUID: unique_uuid });\n                                const payload_query = createPayload(\n                                    'Kustomer_PromptoGPT_Request_Query',\n                                    'Success'\n                                );\n                                let unique_uuid_query = generateUUID();\n                                await logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: user_setting_infos, PAYLOAD_FOR_EVENT: payload_query, UUID: unique_uuid_query, log_message: latestmsgfromuser });\n                                setAutoLoading(false);\n                                return response?.data?.attributes?.responseBody;\n                            }\n\n                        } catch (error) {\n                            console.log(\"Error in autoSuggestApi::\", error)\n                        }\n                    }\n\n                    useEffect(() => {\n                        let updatedAuth = {};\n                        (appSettings?.default || []).forEach((item) => {\n                            if (item.attributes.name === 'apikey') {\n                                updatedAuth.api_key = item.attributes.value;\n                            }\n                            if (item.attributes.name === 'authtoken') {\n                                updatedAuth.authtoken = item.attributes.value;\n                                updatedAuth.appId = item.attributes.app;\n                            }\n                            if (item.attributes.name === 'url_def') {\n                                updatedAuth.url_def = item.attributes.value;\n                                updatedAuth.appId = item.attributes.app;\n                            }\n                            if (item.attributes.name === 'taskgpt_url') {\n                                updatedAuth.dev_normal_url = item.attributes.value;\n                                updatedAuth.appId = item.attributes.app; \n                            }\n                        });\n                        setAuthuu(updatedAuth);\n                    }, [appSettings?.default]);\n                    \n                    useEffect(() => {\n                    }, [isAuthuu, prompt_res, settingreg, isAutoLoading, isEmail, channelType, isOpen, selectedItems]);\n\n                    useEffect(() => {\n                        KustomerRequest({ url: '/v1/users/current' }).then(result => {\n                            changeName(result.data.attributes.name);\n                            setEmail(result.data.attributes.email);\n                        });        \n                        }, []);\n\n                        useEffect(() => {\n                        if (conversation) {\n                            setConv_id(conversation?.id)\n                        }\n                        if (conv_id) {\n                            // let api_token = 'Bearer'+\" \"+process.env.API_TOKEN          \n                            let endpoint = '/v1/conversations/'+conv_id+'/messages';\n                            KustomerRequest({ url: endpoint, method: \"GET\"}).then((result) => {\n                            findLastResponse(result?.data)\n                            })\n                        }\n                        if ((lastUserRes) && (conv_id) && (ischeckboxType == 'promptogpt')) {\n                            // promptoGPTApi(isEmail, lastUserRes, generateToken?.model_type, generateToken?.usecase, generateToken?.authToken)\n                            const autosuggestResponse = async () => {\n                            try {\n                                await showPromptRes(isEmail, lastUserRes, generateToken?.model_type, generateToken?.usecase, generateToken?.authToken)\n                            } catch (err) {\n                                console.log(\"Error in autosuggestResponse::\", err);\n                            }\n                            }\n                            autosuggestResponse();\n                        }\n                    }, [conversation, conv_id, generateToken, lastUserRes, ischeckboxType]);\n\n                    useEffect(() => {\n                        if ((isSettingStatus) && (isApiCall)) {\n                            if (isEmail) {\n                            // settingResponse();\n                            settingBtnAPI()\n                            }            \n                        }\n                    }, [isSettingStatus, isApiCall, isEmail]);\n\n                    useEffect(() => {\n                        if (generateToken) {\n                        }       \n                    }, [generateToken]);  \n\n                    const exhealth = async () => {\n                        try {\n                            let endpoint = '/v1/commands/' + isAuthuu.appId + '.app.exhealth_check_api/run';\n                            let auth_token = \"Bearer\" + \" \" + settingreg?.setting_token;\n                            let exhealthResponse = await KustomerRequest({\n                                url: endpoint,\n                                method: \"POST\",\n                                body: {\n                                    \"headers\": {\n                                        \"Content-Type\": \"application/json\",\n                                        \"Authorization\": auth_token\n                                    },\n                                    \"body\": {\n                                        \"user_email\": settingreg?.settingResponse?.email,\n                                        \"applicationName\": \"Prompto\",\n                                        \"user_id\": settingreg?.settingResponse?.user_id,\n                                        \"app_id\": settingreg?.settingResponse?.app_id,\n                                        \"app_name\": \"Kustomer\",\n                                        \"campaign_name\": settingreg?.settingResponse?.campaign_name,\n                                        \"campaign_id\": settingreg?.settingResponse?.campaign_id,\n                                        \"lob_id\": settingreg?.settingResponse?.lob_id,\n                                        \"lob_name\": settingreg?.settingResponse?.lob_name,\n                                        \"currentUserAppVersion\": \"1.0.0\"\n                                    }\n                                }\n                            },\n                                (err, response) => {\n                                    if (err) {\n                                        console.log(\"Into exhealth Error \", err)\n                                        return 'Failed to process return'\n                                    } else if (response.responseBody.errors) {\n                                        return response.responseBody.errors.message;\n                                    }\n                                }\n                            );\n                            if (exhealthResponse?.data?.attributes?.responseBody) {\n                                console.log(\"Exhealth Response ::\", exhealthResponse?.data?.attributes?.responseBody)\n                                return exhealthResponse?.data?.attributes?.responseBody;\n                            }\n                        } catch (err) {\n                            console.log(\"Error in exhealth::\", err);\n                        }\n                    }\n\n                    const refreshTokenApi = async (refresh_token) => {\n                        try {\n                            let endpoint = '/v1/commands/' + isAuthuu.appId + '.app.refresh_token/run';\n                            let token = 'Bearer' + \" \" + refresh_token;\n                            let refresh_res = await KustomerRequest({\n                                url: endpoint,\n                                method: \"POST\",\n                                headers: {\n                                    'Authorization': token,\n                                    \"Content-Type\": \"application/json\"\n                                }\n                            },\n                                (err, response) => {\n                                    if (err) {\n                                        console.log(\"Into refreshTokenApi Error \", err)\n                                        return 'Failed to process return'\n                                    } else if (response.responseBody.errors) {\n                                        return response.responseBody.errors.message;\n                                    }\n                                }\n                            );\n                            if (refresh_res?.data?.attributes?.responseBody) {\n                                return refresh_res?.data?.attributes?.responseBody;\n                            }\n                        } catch (err) {\n                            console.log(\"Error in refreshTokenApi::\", err);\n                        }\n                    }\n\n                    useEffect(() => {\n                        function healthCheckUp() {\n                            try {\n                                if (settingreg?.refreshToken) {\n                                    exhealth().then(async (response) => {\n\n                                    }).catch((error) => {\n                                        if (error.message == \"Invalid JWT Token\") {\n                                            refreshTokenApi(settingreg?.refreshToken)\n                                                .then((res) => {\n                                                    setSettingreg({\n                                                        ...settingreg,\n                                                        refreshToken: res?.refreshToken,\n                                                        setting_token: res?.authToken\n                                                    });\n                                                    if (res?.authToken) return exhealth();\n                                                }).catch((error) => {\n                                                    handleSessionInvalidation(error);\n                                                })\n                                        }\n                                    })\n                                } \n\n                                function handleSessionInvalidation(error) {\n                                    // const datum = sessionStorage.getItem('isLoggedIn');\n                                    setTimeout(() => {\n                                        setLoading(false);\n                                        setSettingStatus(false);\n                                    }, 5000);\n                                    setLoading(false);\n                                    sessionStorage.setItem('authorAILoggedIn', false);\n                                    setLoggedStatus(false);\n                                    setApiCall(false);\n                                    sessionStorage.setItem('authorAIsettingStatus', false);\n                                    setSettingStatus(false);\n\n                                    throw error;\n                                }\n\n                            } catch (error) {\n                                console.log(\"Error in healthCheckUp::\", error)\n                            }\n                        }\n\n                        const intervalId = setInterval(() => {\n                            // healthCheckUp()\n                        }, 5000)\n\n                        // Clear the interval when the component is unmounted or when isRefreshToken changes\n                        return () => clearInterval(intervalId);\n\n                    }, [settingreg?.refreshToken])\n\n                    useEffect(() => {\n\n                        if (isLoggedStatus && isSettingStatus) {\n                            let pendingClick = 0;\n\n                            const handleSelection = () => {\n                                const selection = window.getSelection();\n                                const selectedText = selection.toString().trim();\n\n                                if (selectedText.length > 0) {\n                                    setSelectedText(selectedText);\n                                    setSelecting(true);\n                                    setPostShortcutLoading(false);\n                                } else {\n                                    // setSelecting(false);\n                                }\n                            };\n\n                            const xorClick = (e) => {\n                                // Clear any pending single-clicks if a new click is detected\n                                if (pendingClick) {\n                                    clearTimeout(pendingClick);\n                                    pendingClick = 0;\n                                }\n\n                                switch (e.detail) {\n                                    case 1:\n                                        // Schedule single-click action if no double-click follows\n                                        pendingClick = setTimeout(() => {\n                                            // const selection = window.getSelection();\n                                            // const selectedText = selection.toString().trim();\n\n                                            // if (selectedText.length > 0) {\n                                            //     setSelectedText(selectedText);\n                                            //     setSelecting(true);\n                                            //     console.log('Single click - text selected:', selectedText);\n                                            // } else {\n                                            //     setSelecting(false);\n                                            // }\n                                            console.log(\"Into this one Single\")\n                                            // setSelecting(true)\n                                        }, 500); // Delay to wait for double-click\n                                        break;\n\n                                    case 2:\n                                        // Immediately handle double-click action\n                                        clearTimeout(pendingClick);\n                                        const selection = window.getSelection();\n                                        const selectedText = selection.toString().trim();\n                                        setTextArea('');\n                                        setPostOrPreOnloading({\n                                            postOnloading: false,\n                                            textData: \"\"\n                                        });\n                                        setPreShortcuts({\n                                            ...preShortcuts,\n                                            preOnloading: false\n                                        });\n\n                                        if (selectedText.length > 0) {\n                                            setSelectedText(selectedText);\n                                            setSelecting(true);\n                                            setPostShortcutLoading(false);\n                                            const logMsg = \"Selected content - \" + selectedText;\n                                            const log_payload = createPayload(\n                                                'Kustomer_AuthorAI_selected_content',\n                                                'Success'\n                                            );\n                                            logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: log_payload, log_message: logMsg });\n\n                                            console.log('Double click - text selected:');\n                                        }\n                                        else {\n                                            console.log(\"Into this one Double\")\n                                            // setSelecting();\n                                        }\n                                        break;\n\n                                    default:\n                                        console.log('Higher multi-click actions can be added as needed');\n                                        break;\n                                }\n                            };\n\n                            const handleMouseUp = () => {\n                                const selection = window.getSelection();\n                                const selectedText = selection.toString().trim();\n\n                                if (selectedText.length > 0) {\n                                    setSelectedText(selectedText);\n                                    setSelecting(true);\n                                    setPostOrPreOnloading({\n                                        ...postOrPreOnloading\n                                    });\n                                    setPreShortcuts({\n                                        ...preShortcuts,\n                                        preOnloading: false\n                                    });\n                                    setPostShortcutLoading(false);\n                                    const logMsg = \"Selected content - \" + selectedText;\n                                    const log_payload = createPayload(\n                                        'Kustomer_AuthorAI_selected_content',\n                                        'Success'\n                                    );\n                                    logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: log_payload, log_message: logMsg });\n\n                                    console.log('Mouse selection - text selected:');\n                                } else {\n                                    // setSelecting(false);\n                                    // setSelectedText('');\n                                    // setPostShortcutLoading(true);\n                                }\n                            };\n\n                            // Add event listener for click and mouseup events\n                            document.addEventListener('click', xorClick, false);\n                            document.addEventListener('mouseup', handleMouseUp, false);\n\n                            // Cleanup event listeners on component unmount\n                            return () => {\n                                clearTimeout(pendingClick);\n                                document.removeEventListener('click', xorClick);\n                                document.removeEventListener('mouseup', handleMouseUp);\n                            };\n\n\n                        } else {\n                            setSelectedText('')\n                        }\n\n                    }, [isLoggedStatus, isSettingStatus, selectedText, settingreg, ischeckboxType]);\n\n                    useEffect(() => {\n                        if ((selectedText == \"\") && (textArea == \"\")) {\n                            // setSelecting(false);\n                            setPostShortcutLoading(true);\n                        }\n                        if (((selectedText == \"\") && (textArea == \"\") && (selections?.length == 0) && !(preShortcuts?.preOnloading) && (preShortcuts?.preShortcutOption == \"\"))) {\n                            setSelecting(false);\n                            // setPostShortcutLoading(false);\n                            // setPostShortcutLoading(true);\n                        }\n\n                        // if (textArea == \"\") {\n                        //     setSelecting(false);\n                        //     // setPostShortcutLoading(true);\n                        //     // setPostOrPreOnloading({\n                        //     //     ...postOrPreOnloading,\n                        //     //     preOnloading: true\n                        //     // });\n                        // }\n                    }, [selectedText, textArea, preShortcuts, selections]);\n\n                    useEffect(() => { }, [selections]);\n\n                    useEffect(() => {\n                        // Scroll when either loading state changes or a new response is added\n                        if ((isAutoLoading || selections.length > prevSelectionCount.current) && scrollRef.current) {\n                            scrollRef.current.scrollIntoView({ behavior: \"smooth\" });\n                        }\n                        // Update previous selection count after checking\n                        prevSelectionCount.current = selections.length;\n                    }, [isAutoLoading, selections.length]); // Trigger on loading state or new response\n\n                    useEffect(() => {\n                        if (ischeckboxType == \"promptogpt\" || ischeckboxType == \"knowledge_assist\") {\n                            setSelectedText('');\n                            setSelecting(true);\n                            setPostShortcutLoading(true);\n                            setTextArea('');\n                            // setPostpreConfig({});\n                            setPreShortcuts({\n                                ...preShortcuts,\n                                preOnloading: false,\n                                preShortcutOption: \"\"\n                            });\n                            setIsOpen(false);\n                            setSelectedItems({})\n                        }\n                    }, [ischeckboxType])\n\n                    useEffect(() => {\n                    }, [isSelecting, selectedText, postpreConfig, postOrPreOnloading, isEmail, isAutoLoading, preShortcuts, promptoRes, toneWriting]);\n\n                    \n                    async function findLastResponse(result) {\n                        try {\n                            {\n                                (result || []).map((item) => {\n                                    if (item.attributes.direction === \"in\") {\n                                        setLastUserRes(item.attributes.preview)\n                                    }\n                                    if (item.attributes.direction === 'out') {\n                                        setLastUserRes('Agent')\n                                    }\n                                    if (item.attributes.channel === 'email') {\n                                        setChannelType(\"email\")\n                                    }\n                                })\n                            };\n                        } catch (error) {\n                            console.log(\"Error in findLastResponse::\", result)\n                        }\n                    }        \n\n                    //Styles\n                    const divStyle = {\n                        display: 'flex',\n                        alignItems: \"center\",\n                        gap: \"5px\"\n                    };\n\n                    const promptoGpt_style = {\n                        padding: \"7px 5px\",\n                        margin: \"10px 0px\",\n                        border: \"1px solid\",\n                        background: \"#D3D3D3\",\n                        textAlign: \"Justify\"\n                    } \n                    \n                    const common_style = { \n                        fontFamily: \"poppins\", \n                        fontSize: \"16px\", \n                        color: \"#000000\"\n                    }\n\n                    async function showPromptRes(isEmail, lastUserRes, model_type, usecase, authToken) {\n                        try {\n                            let autosuggestResponse = await autoSuggestApi(isEmail, lastUserRes, model_type, usecase, authToken, isAuthuu, settingreg);            \n                            setPrompt_res({\n                            top_responses: autosuggestResponse?.top_responses,\n                            top_scores: autosuggestResponse?.top_scores\n                            });\n                        } catch (err) {\n                            console.log(\"Error in showPromptRes::\", err)\n                        }\n                    }\n\n                    async function selectedCheckbox(value) {\n                        try {\n                            setCheckboxType(value)\n                            if (value === 'promptogpt') {\n                            const payload = createPayload(\n                                'Kustomer_PromptoGPT_ON',\n                                'Success'\n                            );\n                            const promptogpt_on_LogMsg = \"PromptoGPT Turned ON\";\n                            if (settingreg) {\n                                await logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: payload, log_message: promptogpt_on_LogMsg });\n                            }                        \n                            \n                            } else {\n                            const payload = createPayload(\n                                'Kustomer_KnowledgeAssist_ON',\n                                'Success'\n                            );\n                            const knowledgeAssist_on_LogMsg = \"KnowledgeAssist Turned ON\";\n                            if (settingreg) {\n                                await logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: payload, log_message: knowledgeAssist_on_LogMsg });\n                            }\n                            }\n                        } catch (err) {\n                            console.log(\"Error in selectedCheckbox::\", err)\n                        }\n                    }\n\n                    function promptoGPTResponse() {\n                        let lst_ = ['hi', 'hello', 'how are you', 'what’s up', 'hey', 'good morning', 'good evening', 'good night', 'how do you do', 'how are you?', 'what’s up?', 'how do you do?', 'how are you ?', 'what’s up ?', 'how do you do ?'];\n                        \n                        let data = [];\n                        data = prompt_res?.top_scores.map((item, index) => {\n                            if (item != 0) {\n                            return prompt_res?.top_responses[index]\n                            }\n                        }).filter(response => response !== undefined);\n                        try {\n                            return (\n                            <>\n                                <div style={{\n                                ...common_style,\n                                margin: \"10px 0px 5px\",                                \n                                fontWeight: \"600\",\n                                color: \"#000000\",\n                                fontFamily: \"poppins\",\n                                fontSize: \"16px\"\n                                }}>\n                                Query\n                                </div>\n                                <div\n                                style={{\n                                    color: \"#808080\",\n                                    fontWeight: \"500\",\n                                    fontSize: \"14px\",\n                                    fontFamily: \"poppins\"\n                                }}\n                                >\n                                {lastUserRes}\n                                </div>\n\n                                {(isAutoLoading) ?\n                                    <div style={{\n                                        ...common_style,\n                                        margin: \"10px 0px 5px\",\n                                        fontWeight: \"600\",\n                                        color: \"#000000\",\n                                        fontSize: \"14px\",\n                                        display: \"flex\",\n                                        gap: \"8px\",\n                                        fontStyle: \"normal\",\n                                        alignItems: \"center\",\n                                        justifyContent: \"flex-start\"\n                                    }}>\n                                        <span className={'loader-prompt'}></span>\n                                        <span style={{\n                                            color: '#000000'\n                                            // color: 'transparent',\n                                            // background: \"linear-gradient(to left, rgb(220, 7, 213), rgb(6, 6, 192), rgb(161, 161, 5), rgb(153, 8, 220))\",\n                                            // WebkitBackgroundClip: \"text\",\n                                        }}\n                                        >Prompt<sup>AI</sup></span> is writing....\n                                    </div>\n                                    :\n                                    <div style={{\n                                        ...common_style,\n                                        margin: \"10px 0px 5px\",\n                                        fontWeight: \"600\",\n                                        color: \"#000000\"\n                                    }}>\n                                        Responses\n                                        {(lst_.includes(lastUserRes.toLowerCase())) ?\n                                        <div className={'response-box'} style={{cursor: \"not-allowed\"}}>\n                                            Small Talk Identified\n                                        </div>\n                                        :\n                                        <>\n                                            {(data?.length == 0) ?\n                                            <div\n                                                className={'response-box'}\n                                                style={{cursor: \"not-allowed\"}}\n                                            >\n                                                {/*{item}*/}\n                                                No match found for this data.\n                                            </div>\n                                            :\n                                            <>\n                                                {(data || []).map((item, index) => {\n                                                const cleanedItem = item.replace(/johns*->s*/i, \"\");\n                                                const payload = createPayload(\n                                                    'Kustomer_PromptoGPT_Received_Response',\n                                                    'Success'\n                                                );\n                                                let unique_uuid = generateUUID();\n                                                let response_received_LogMsg = 'Response_'+(index+1)+ \": \"+ cleanedItem;\n                                                if (settingreg) {\n                                                    logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: payload, UUID: unique_uuid, log_message: response_received_LogMsg });\n                                                }\n                                                return (\n                                                    <div\n                                                    key={index}\n                                                    className={'response-box'}\n                                                    onClick={() => copyFunc(cleanedItem, index)}\n                                                    >\n                                                    {/*{item}*/}\n                                                    {cleanedItem}\n                                                    {(copied === index) && <span className={'copied-message'}>Copied</span>}\n                                                    </div>\n\n                                                )\n                                                })}\n                                            </>\n                                            }\n                                        </>\n                                        }\n                                    </div>\n                                }\n                            </>\n                            )\n                        } catch (error) {\n                            console.log(\"Error in promptoGPTResponse:: \", error)\n                        }\n                    }\n\n                    async function loginBtnAPI() {\n                        setLoading(true);\n                        let endpoint = '/v1/commands/' + isAuthuu.appId + '.app.login_api/run';\n                        try {\n                            let resdata = await KustomerRequest({\n                            url: endpoint,\n                            method: 'POST',\n                            body: {\n                                \"body\": {\n                                    \"email\": isEmail\n                                }\n                            }\n                            },\n                            (err, response) => {\n                                if (err) {\n                                console.log(\"Into 1\")\n                                return 'Failed to process return'\n                                } else if (response.responseBody.errors) {\n                                console.log(\"Into 2\")\n                                return response.responseBody.errors.message;\n                                }\n                            }\n                            );\n                            let loginResponse = resdata?.data?.attributes?.responseBody;\n                            if (loginResponse?.status === true) {\n                            sessionStorage.setItem('authorAILoggedIn', true);\n                            setLoggedStatus(true);\n                            setApiCall(false)\n                            // settingResponse();\n                            settingBtnAPI()\n                            }\n                        } catch (err) {\n                            console.log(\"Error in loginBtnAPI::\", err)\n                        }\n                    }\n\n                    const fetchupdatedGlobalConfigApi = async (user_setting_response, apitoken, apikey, authorAIInstance_data, authToken) => {\n                        try {\n                            let endpoint = isAuthuu?.dev_normal_url + \"/api/external/getUsecaseConfig/\"+authorAIInstance_data[0]?.id;\n                            let fetchUpdatedRes = await fetch(endpoint, {\n                                method: \"GET\",\n                                // headers: dev_headers\n                                \"headers\": {\n                                    // \"Content-Type\": \"application/json\",\n                                    // \"x-apitoken\": apitoken,\n                                    // \"x-apikey\": apikey,\n                                    \"x-authtoken\": authToken,\n                                    \"CF-Access-Client-Id\": user_setting_response?.settings.CF_Access_Client_Id,\n                                    \"CF-Access-Client-Secret\": user_setting_response?.settings.CF_Access_Client_Secret\n                                },\n                            });\n\n                            if (!(fetchUpdatedRes.ok)) {\n                                throw new Error(\"HTTP error! status:\", fetchUpdatedRes?.status)\n                            }\n                            const data = await fetchUpdatedRes.json();                            \n                            let configRes = data;\n                            let preshortCutArray = configRes?.data?.preShortcuts?.filter(item => item.name !== \"TEMPLATE_MENU\");                            \n                            setPostpreConfig({\n                                postShortcuts: configRes?.data?.postShortcuts,\n                                // preShortcuts: configRes?.data?.preShortcuts\n                                preShortcuts: preshortCutArray\n                            });\n                        } catch (err) {\n                            console.log(\"Error in fetchupdatedGlobalConfigApi::\", err);\n                        }\n                    }\n\n                    async function settingBtnAPI() {\n                        setLoading(true)\n                        let endpoint = '/v1/commands/'+isAuthuu.appId+'.app.setting_api/run';\n                        try {\n                            let data = await KustomerRequest({\n                                url: endpoint,\n                                method: 'POST',\n                                body: {\n                                    \"headers\": {\n                                        \"X-ApiToken\": \"{{{aauthtoken}}}\",\n                                        \"X-ApiKey\": \"{{{aapikey}}}\",\n                                        \"Accept\": \"application/json\",\n                                        \"Content-Type\": \"application/json\"\n                                    },\n                                    \"body\": {\n                                        \"email\": isEmail\n                                    }\n                                }\n                            },\n                                (err, response) => {\n                                    if (err) {\n                                        console.log(\"Into 1\")\n                                        setLoading(false);\n                                        return 'Failed to process return'\n                                    } else if (response.responseBody.errors) {\n                                        console.log(\"Into 2\")\n                                        return response.responseBody.errors.message;\n                                    }\n                                }\n                            );\n                            let settingRes = data?.data?.attributes?.responseBody\n                            if (settingRes?.message === \"Authentication failed \") {\n                                sessionStorage.setItem('authorAIStatus', false);\n                                setSettingStatus(false);\n                                setLoading(false);\n                            } else {\n                                sessionStorage.setItem('authorAIStatus', true);\n                                // setSettingStatus(true);\n                                setSettingreg({\n                                    refreshToken: settingRes?.refresh_token,\n                                    settingResponse: settingRes,\n                                    setting_token: settingRes?.authToken,\n                                    CF_Access_Client_Id: settingRes?.settings?.CF_Access_Client_Id,\n                                    CF_Access_Client_Secret: settingRes?.settings?.CF_Access_Client_Secret\n                                });\n                                // setSettingreg(settingRes);\n                                // setLoading(false);\n                                const logMsg = \"Successfully LoggedIn\";\n                                const payload = createPayload(\n                                'Kustomer_LoggedIn',\n                                'Success'\n                                );\n                                await logsAPI({ isAuthuu: isAuthuu, setting_token: settingRes?.authToken, user_setting: settingRes, PAYLOAD_FOR_EVENT: payload, log_message: logMsg });\n                                // const { authToken, clientAuthToken, model_type, usecase, promptoGPT_toggle, knowledgeAssist_toggle } = await generate_auth_client_token(settingRes, isEmail);\n                                // globalConfigApi(settingRes?.settings.x_apitoken, settingRes?.settings.x_apikey);\n                                const { authToken, clientAuthToken, model_type, usecase, promptoGPT_toggle, knowledgeAssist_toggle, authorAI_toggle, authorAIInstance } = await generateTokenApi(settingRes, isEmail, isAuthuu);\n                                fetchupdatedGlobalConfigApi(settingRes, settingRes?.settings.x_apitoken, settingRes?.settings.x_apikey, authorAIInstance, authToken);\n                                setGenerateToken(\n                                {\n                                    authToken: authToken,\n                                    client_authtoken: clientAuthToken,\n                                    promptoGPT_toggle: promptoGPT_toggle,\n                                    knowledgeAssist_toggle: knowledgeAssist_toggle,\n                                    authorAI_toggle: authorAI_toggle,\n                                    model_type: model_type,\n                                    usecase: usecase\n                                }\n                                )\n                            }\n                        } catch (err) {\n                            console.log(\"Error in settingBtnAPI::\", err)\n                        }\n                    }\n\n                    async function logoutBtn() {\n                        try {\n                            setLoading(false);\n                            sessionStorage.setItem('authorAILoggedIn', false);\n                            setLoggedStatus(false);\n                            setApiCall(false);\n                            sessionStorage.setItem('authorAIStatus', false);\n                            setSettingStatus(false);\n                            setCheckboxType('');\n                            setAutoLoading(false);\n                        } catch (err) {\n                            console.log(\"Error in logoutBtn::\", err)\n                        }\n                    }\n\n                    const regenerate_authToken = async () => {\n                        try {\n                            const { authToken, clientAuthToken, model_type, usecase } = await generateTokenApi(settingreg?.settingResponse, isEmail, isAuthuu);\n                            setGenerateToken(\n                                {\n                                    authToken: authToken,\n                                    client_authtoken: clientAuthToken,\n                                    model_type: model_type,\n                                    usecase: usecase\n                                }\n                            );\n                            return { authToken, model_type };\n                        } catch (error) {\n                            console.log(\"Error in regenerate_authToken::\", error);\n                        }\n                    }\n\n                    const initialPage = () => {\n                        return (\n                            <>\n                                <div className={'write_paste_selected_txt'}>\n                                    {(postpreConfig?.postShortcuts?.length > 0) ? 'Write/Select Text to Start' : 'Write A Text to Start'}\n                                </div>\n                            </>\n                        )\n                    }\n\n                    const post_sub_category_items = async (e, item, sub_category, index) => {\n                        try {\n                            e.stopPropagation();\n                            setPostShortcutLoading(true);\n                            let textData;\n                            if (postOrPreOnloading?.postOnloading) {\n                                textData = postOrPreOnloading?.textData;\n                            } else {\n                                textData = textArea ? textArea : selectedText;\n                            }\n\n                            let auto_authToken;\n                            let model_type;\n                            if (generateToken?.authToken || generateToken?.model_type) {\n                                auto_authToken = generateToken?.authToken;\n                                model_type = generateToken?.model_type;\n                            } else {\n                                let data = await regenerate_authToken();\n                                auto_authToken = data?.authToken;\n                                model_type = data?.model_type\n                            }\n\n                            let payload = {\n                                body: {\n                                    \"application_name\": \"TaskScribe\",\n                                    \"model_type\": model_type,\n                                    // \"usecase\": sub_category?.useCase?.aiName,\n                                    \"usecase\": sub_category?.prompt,\n                                    \"question\": textData,\n                                    \"user_id\": isEmail,\n                                    //\"enable_automasking\": true\n                                },\n                                headers: {\n                                    \"Content-Type\": \"application/json\",\n                                    \"X-Authtoken\": auto_authToken,\n                                    \"CF-ACCESS-CLIENT-ID\": settingreg?.CF_Access_Client_Id,\n                                    \"CF-ACCESS-CLIENT-SECRET\": settingreg?.CF_Access_Client_Secret\n                                },\n                                category: {\n                                    main_category: item?.displayName,\n                                    sub_category: sub_category?.displayName,\n                                    type: item?.type\n                                }\n                            }\n                            if (sub_category?.useCaseOption) {\n                                payload.body['usecase_options'] = sub_category?.useCaseOption?.aiName\n                            }\n                            let unique_uuid = generateUUID();\n                            const log_payload = createPayload(\n                                'Kustomer_AuthorAI_Post_Category_Clicked',\n                                'Success'\n                            );\n                            let post_categoty_msg = \"Clicked the prompt option - \" + \" \" + sub_category?.displayName;\n                            await logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: log_payload, UUID: unique_uuid, log_message: post_categoty_msg });\n\n                            postPreAutoSuggestApi(payload, isAuthuu)\n                        } catch (err) {\n                            console.log(\"Error in post_sub_category_items::\", err);\n                        }\n                    }\n\n                    const ps_main_category = async (item) => {\n                        try {\n                            let textData;\n                            if (postOrPreOnloading?.postOnloading) {\n                                textData = postOrPreOnloading?.textData;\n                            } else {\n                                textData = textArea ? textArea : selectedText;\n                            }\n\n                            setPostShortcutLoading(true);\n\n                            let auto_authToken;\n                            let model_type;\n                            if (generateToken?.authToken || generateToken?.model_type) {\n                                auto_authToken = generateToken?.authToken;\n                                model_type = generateToken?.model_type;\n                            } else {\n                                let data = await regenerate_authToken();\n                                auto_authToken = data?.authToken;\n                                model_type = data?.model_type\n                            }\n\n                            let payload = {\n                                body: {\n                                    \"application_name\": \"TaskScribe\",\n                                    \"model_type\": model_type,\n                                    // \"usecase\": item?.useCase?.aiName,\n                                    usecase: item?.prompt,\n                                    \"question\": textData,\n                                    \"user_id\": isEmail,\n                                    // \"enable_automasking\": true\n                                },\n                                headers: {\n                                    \"Content-Type\": \"application/json\",\n                                    \"X-Authtoken\": auto_authToken,\n                                    \"CF-ACCESS-CLIENT-ID\": settingreg?.CF_Access_Client_Id,\n                                    \"CF-ACCESS-CLIENT-SECRET\": settingreg?.CF_Access_Client_Secret\n                                },\n                                category: {\n                                    main_category: item?.displayName,\n                                    sub_category: \"\",\n                                    type: item?.type\n                                }\n\n                            }\n                            if (item?.useCaseOption) {\n                                payload.body['usecase_options'] = item?.useCaseOption?.aiName\n                            }\n                            let unique_uuid = generateUUID();\n                            const log_payload = createPayload(\n                                'Kustomer_AuthorAI_Post_Category_Clicked',\n                                'Success'\n                            );\n                            let post_categoty_msg = \"Clicked the prompt option - \" + \" \" + item?.displayName;\n                            await logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: log_payload, UUID: unique_uuid, log_message: post_categoty_msg });\n\n                            postPreAutoSuggestApi(payload, isAuthuu)\n                        } catch (err) {\n                            console.log(\"Error in ps_main_category::\", err);\n                        }\n                    }\n\n                    const toggleDropdown = (id) => {\n                        setIsOpen((prevOpen) => ({\n                            ...prevOpen,\n                            [id]: !prevOpen[id]\n                        }));\n                    }\n\n                    const handleSelect = (event, itemId, sub) => {\n                        let selectId = itemId?.id;\n                        setSelectedItems((prevSelected) => ({\n                            ...prevSelected,\n                            [selectId]: sub.displayName\n                        }));\n                        setIsOpen((prevOpen) => ({\n                            ...prevOpen,\n                            [selectId]: false\n                        }));\n                        try {\n                            post_sub_category_items && post_sub_category_items(event, itemId, sub);\n                        } catch (error) {\n                            console.error(\"Error in post_sub_category_items:\", error);\n                        }\n                    };\n\n                    const closeDropdown = (id) => {\n                        setIsOpen((prevOpen) => ({\n                            ...prevOpen,\n                            [id]: false\n                        }));\n                    };\n\n                    const post_shortcut_content = () => {\n                        return (\n                            <div className=\"post_shortcut_list\">\n                                {(postpreConfig?.postShortcuts || []).map((item) => {\n                                    return (\n                                        <div\n                                            className={'ps_single_item'}\n                                            onClick={() => (item?.subUseCases.length == 0) && ps_main_category(item)}\n                                        >\n                                            <div\n                                                className={'ps_main_list_names'}\n                                            // onMouseDown={() => setPostShortcutLoading(true)}\n\n                                            >\n                                                {item.displayName}\n                                            </div>\n                                            <div className={'post_shortcut_subcategory'}>\n                                                {item?.subUseCases?.length > 0 && (\n                                                    <div \n                                                        className=\"dropdown-container\"\n                                                        onMouseLeave={() => closeDropdown(item.id)} // Close dropdown on mouse leave\n                                                    >\n                                                        <div\n                                                            className=\"dropdown-selected\"\n                                                            onClick={() => toggleDropdown(item.id)}\n                                                        >\n                                                            {selectedItems[item.id] || \"Select an option\"} \n                                                            {isOpen[item.id] ? (\n                                                                <svg width=\"13\" height=\"8\" viewBox=\"0 0 13 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                                    <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M12.3614 7.59999C11.8928 8.06862 11.133 8.06862 10.6644 7.59999L6.71289 3.64852L2.76142 7.59999C2.29279 8.06862 1.53299 8.06862 1.06436 7.59999C0.595733 7.13136 0.595733 6.37157 1.06436 5.90294L5.86436 1.10294C6.33299 0.634307 7.09279 0.634308 7.56142 1.10294L12.3614 5.90294C12.83 6.37157 12.83 7.13137 12.3614 7.59999Z\" fill=\"#8217FF\" />\n                                                                </svg>\n                                                            ) : (\n                                                                <svg width=\"13\" height=\"8\" viewBox=\"0 0 13 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                                    <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M1.06436 0.751374C1.53299 0.282745 2.29279 0.282745 2.76142 0.751374L6.71289 4.70285L10.6644 0.751374C11.133 0.282745 11.8928 0.282745 12.3614 0.751374C12.83 1.22 12.83 1.9798 12.3614 2.44843L7.56142 7.24843C7.09279 7.71706 6.33299 7.71706 5.86436 7.24843L1.06436 2.44843C0.595733 1.9798 0.595733 1.22 1.06436 0.751374Z\" fill=\"#8217FF\" />\n                                                                </svg>\n                                                            )}\n                                                        </div>\n                                                        {isOpen[item.id] && (\n                                                            <div className=\"dropdown-options\">\n                                                                {item.subUseCases.map((sub) => (\n                                                                    <div\n                                                                        key={sub.id}\n                                                                        className=\"dropdown-option\"\n                                                                        onClick={(e) => handleSelect(e,item, sub)}\n                                                                    >\n                                                                        {sub.displayName}\n                                                                    </div>\n                                                                ))}\n                                                            </div>\n                                                        )}\n                                                    </div>\n                                                )}\n                                            </div>\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                        )\n                    }\n\n                    const handleReplyTextArea = (e) => {\n                        try {\n                            if (preShortcuts?.preShortcutOption) {\n                                console.log(\"Into this \")\n                                setPostShortcutLoading(true);   // not to show\n                            } else {\n                                console.log(\"Into 2 \")\n                                setPostShortcutLoading(false);\n                                setPostOrPreOnloading({\n                                    postOnloading: false,\n                                    textData: \"\"\n                                });\n                                setPreShortcuts({\n                                    ...preShortcuts,\n                                    preOnloading: false\n                                })\n                            }\n                            setTextArea(e.target.value);\n                            setSelecting(true);\n                            setSelectedText('');\n                        } catch (err) {\n                            console.log(\"Err in handleReplyTextArea:: \", err)\n                        }\n                    }\n\n                    const enteredTextAreas = async () => {\n                        try {\n                            let auto_authToken;\n                            let model_type;\n                            if (generateToken?.authToken || generateToken?.model_type) {\n                                auto_authToken = generateToken?.authToken;\n                                model_type = generateToken?.model_type;\n                            } else {\n                                let data = await regenerate_authToken();\n                                auto_authToken = data?.authToken;\n                                model_type = data?.model_type\n                            }\n                            let payload = {\n                                body: {\n                                    \"application_name\": \"TaskScribe\",\n                                    \"model_type\": model_type,\n                                    \"usecase\": preShortcuts?.preShortcutOption?.prompt,\n                                    \"question\": textArea,\n                                    \"user_id\": isEmail,\n                                    // \"enable_automasking\": true\n                                },\n                                headers: {\n                                    \"Content-Type\": \"application/json\",\n                                    \"X-Authtoken\": auto_authToken,\n                                    \"CF-ACCESS-CLIENT-ID\": settingreg?.CF_Access_Client_Id,\n                                    \"CF-ACCESS-CLIENT-SECRET\": settingreg?.CF_Access_Client_Secret\n                                },\n                                category: {\n                                    main_category: preShortcuts?.preShortcutOption?.displayName,\n                                    sub_category: \"\",\n                                    type: preShortcuts?.preShortcutOption?.type\n                                }\n\n                            }\n                            if (preShortcuts?.preShortcutOption?.name != \"TEMPLATE_MENU\") {\n                                // payload.body['usecase_options'] = preShortcuts?.preShortcutOption?.name\n                            } else {\n                                payload.body['usecase_options'] = {\n                                    name: \"email\",\n                                    voice_tone: toneWriting?.selected_tone,\n                                    writing_style: toneWriting?.selected_writing_style\n                                }\n                            }\n                            postPreAutoSuggestApi(payload, isAuthuu)\n                        } catch (err) {\n                            console.log(\"Error in enteredTextAreas::\", err);\n                        }\n                    }\n\n                    const pre_post_textarea = () => {\n                        return (\n                            <>\n                                {(preShortcuts?.preShortcutOption) &&\n                                    <div className={'selected_pre_option'}>\n                                        <div>{preShortcuts?.preShortcutOption && preShortcuts?.preShortcutOption?.displayName}</div>\n                                        <div\n                                            onClick={() => {\n                                                setPreShortcuts({\n                                                    ...preShortcuts,\n                                                    preOnloading: false,\n                                                    preShortcutOption: \"\"\n                                                });\n                                                setTextArea('')\n                                            }}\n                                            style={{ cursor: \"pointer\" }}\n                                        >\n                                            x\n                                        </div>\n                                    </div>\n                                }\n\n                                {preShortcuts?.preShortcutOption?.name == \"TEMPLATE_MENU\" &&\n                                    <div className=\"promptoWritingStyleOptions\">\n                                        <div className=\"tone_style_content\">\n                                            <div>Tone</div>\n                                            <select \n                                                value={toneWriting.selected_tone}\n                                                className=\"tone_lists\"\n                                                onChange={(e) => setToneWriting({\n                                                    ...toneWriting,\n                                                    selected_tone: e.target.value\n                                                })}\n                                            >\n                                                {((promptoRes?.promptToneOptions) || []).map((item) => {\n                                                    return (\n                                                        <option className='tone_item' value={item}>{item}</option>\n                                                    )\n                                                })}\n                                            </select>\n\n                                        </div>\n                                        <div className=\"tone_style_content\">\n                                            <div>Tone</div>\n                                            <select\n                                                value={toneWriting.selected_writing_style}\n                                                className=\"tone_lists\"\n                                                onChange={(e) => setToneWriting({\n                                                    ...toneWriting,\n                                                    selected_writing_style: e.target.value\n                                                })}\n                                            >\n                                                {((promptoRes?.promptoWritingStyleOptions) || []).map((item) => {\n                                                    return (\n                                                        <option className='tone_item' value={item}>{item}</option>\n                                                    )\n                                                })}\n                                            </select>\n\n                                        </div>\n                                    </div>\n                                }\n\n                                <div className={\"pre_ta_parent\"}>\n                                    <div className={'pre_textarea'}>\n                                        <textarea\n                                            value={textArea}\n                                            // readOnly={!(userLang?.trim())}\n                                            className={'textarea_input'}\n                                            placeholder={(postpreConfig?.postShortcuts?.length > 0)?'Write/Select any text...': 'Write any text...'}\n                                            onChange={handleReplyTextArea}\n                                            onFocus={() => setPreShortcuts({\n                                                ...preShortcuts,\n                                                preOnloading: false\n                                            })}\n                                            onKeyDown={(e) => {\n                                                if (e.key === 'Enter') {\n                                                    e.preventDefault();  // Prevents new line in the textarea\n                                                    enteredTextAreas();  // Call the function\n                                                }\n                                            }}\n                                        />\n                                        {preShortcuts?.preShortcutOption == \"\" &&\n                                            (\n                                                <>\n                                                    {(postpreConfig?.preShortcuts?.length > 0) ?\n                                                        <div\n                                                            className={'magic_icon'}\n                                                            onClick={() => {\n                                                                setPreShortcuts({\n                                                                    ...preShortcuts,  // Spread the current state\n                                                                    // preOnloading: true     // Update the specific field    \n                                                                    preOnloading: !(preShortcuts?.preOnloading)\n                                                                });\n                                                                setPostShortcutLoading(true); // Make it off by giving opposite\n                                                                setSelectedText('');\n                                                                setSelecting(true)\n                                                            }}\n                                                        >\n                                                            <svg width=\"34\" height=\"34\" viewBox=\"0 0 34 34\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                                <rect x=\"0.5\" y=\"0.5\" width=\"33\" height=\"33\" rx=\"3.5\" fill=\"#F3E8FF\" />\n                                                                <rect x=\"0.5\" y=\"0.5\" width=\"33\" height=\"33\" rx=\"3.5\" stroke=\"#C694FF\" />\n                                                                <path d=\"M11.75 10.25V13.25M10.25 11.75H13.25M12.5 20.75V23.75M11 22.25H14M17.75 10.25L19.4643 15.3929L23.75 17L19.4643 18.6071L17.75 23.75L16.0357 18.6071L11.75 17L16.0357 15.3929L17.75 10.25Z\" stroke=\"#8217FF\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n                                                            </svg>\n\n                                                        </div>\n                                                        :\n                                                        <div\n                                                            className={'magic_icon notAllowed'}\n                                                        >\n                                                            <svg width=\"34\" height=\"34\" viewBox=\"0 0 34 34\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                                <rect x=\"0.5\" y=\"0.5\" width=\"33\" height=\"33\" rx=\"3.5\" fill=\"#F3E8FF\" />\n                                                                <rect x=\"0.5\" y=\"0.5\" width=\"33\" height=\"33\" rx=\"3.5\" stroke=\"#C694FF\" />\n                                                                <path d=\"M11.75 10.25V13.25M10.25 11.75H13.25M12.5 20.75V23.75M11 22.25H14M17.75 10.25L19.4643 15.3929L23.75 17L19.4643 18.6071L17.75 23.75L16.0357 18.6071L11.75 17L16.0357 15.3929L17.75 10.25Z\" stroke=\"#8217FF\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n                                                            </svg>\n\n                                                        </div>\n                                                    }\n                                                </>\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            </>\n\n                        )\n                    }\n\n                    const selectedPreShortcut = async (pre_object) => {\n                        try {\n                            setSelecting(true);\n                            setPostShortcutLoading(true);\n                            if (pre_object?.displayName == \"Templates\") {\n                                setPreShortcuts({\n                                    ...preShortcuts,\n                                    preOnloading: false,\n                                    preShortcutOption: { displayName: promptoRes?.shownforTemplate, name: pre_object?.name, usecase: { aiName: pre_object?.useCase?.aiName } }\n                                });\n                            } else {\n                                setPreShortcuts({\n                                    ...preShortcuts,\n                                    preOnloading: false,\n                                    preShortcutOption: pre_object\n                                });\n                            }\n                            \n\n                            let unique_uuid = generateUUID();\n                            const log_payload = createPayload(\n                                'Kustomer_AuthorAI_PreShortcut_Option_Clicked',\n                                'Success'\n                            );\n                            let pre_categoty_msg = \"Clicked the prompt option - \" + \" \" + pre_object?.displayName;\n                            await logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: log_payload, UUID: unique_uuid, log_message: pre_categoty_msg });\n\n                        } catch (err) {\n                            console.log(\"Error in selectedPreShortcut:: \", err);\n                        }\n                    }\n\n                    const pre_shortcut_content = () => {\n                        return (\n                            <div className={'pre_shortcut_list'}>\n                                {(postpreConfig?.preShortcuts || []).map((preshortcut) => {\n                                    return (\n                                        <div className={'pr_single_item'} onClick={() => selectedPreShortcut(preshortcut)}>\n                                            {(preshortcut?.name == \"TEMPLATE_MENU\") ?\n                                                <div style={{margin: \"2px 0px 0px\"}}>\n                                                    <svg width=\"22\" height=\"20\" viewBox=\"0 0 22 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M10.049 1.92664C10.3483 1.00537 11.6517 1.00538 11.951 1.92664L13.4699 6.60055C13.6038 7.01254 13.9877 7.29148 14.4209 7.29149L19.3354 7.29168C20.3041 7.29172 20.7068 8.53127 19.9232 9.10067L15.9474 11.9895C15.5969 12.2441 15.4503 12.6955 15.5841 13.1075L17.1026 17.7815C17.4019 18.7028 16.3475 19.4689 15.5638 18.8995L11.5878 16.011C11.2373 15.7564 10.7627 15.7564 10.4122 16.011L6.43622 18.8995C5.65252 19.4689 4.5981 18.7028 4.8974 17.7815L6.41589 13.1075C6.54974 12.6955 6.40309 12.2441 6.05263 11.9895L2.07683 9.10067C1.29317 8.53127 1.69592 7.29172 2.66461 7.29168L7.57911 7.29149C8.01231 7.29148 8.39623 7.01254 8.53011 6.60055L10.049 1.92664Z\" stroke=\"#282829\" stroke-width=\"1.5\"/>\n</svg>\n\n                                                </div>\n                                                :\n                                                ((preshortcut?.name == \"TASKSCRIBE_CUSTOM_PROMPT\") ?\n                                                    <div style={{margin: \"2px 0px 0px\"}}><svg width=\"19\" height=\"19\" viewBox=\"0 0 19 19\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 3H3C1.89543 3 1 3.89543 1 5V16C1 17.1046 1.89543 18 3 18H14C15.1046 18 16 17.1046 16 16V11M14.5858 1.58579C15.3668 0.804738 16.6332 0.804738 17.4142 1.58579C18.1953 2.36683 18.1953 3.63316 17.4142 4.41421L8.82842 13H6L6 10.1716L14.5858 1.58579Z\" stroke=\"#282829\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n</div>\n                                                    :\n                                                    <></>\n                                                )\n                                            }\n                                            <div>{preshortcut?.displayName}</div>\n                                        </div>\n                                    )\n                                })\n                                }\n                            </div>\n                        )\n                    }\n\n                    const post_pre_select_box = () => {\n                        return (\n                            <>\n                                {postpreConfig?.postShortcuts?.length > 0 ?\n                                    <>\n                                        {!(postShortcutLoading) && <div className={'postShortcutLoadingv'}>{post_shortcut_content()}</div>}\n                                    </>\n                                    :\n                                    <></>\n                                }\n                                {(postpreConfig?.preShortcuts?.length > 0) ?\n                                    <>\n                                        {(preShortcuts?.preOnloading) && <div className={'preShortcutLoadingv'}>{pre_shortcut_content()}</div>}\n                                    </>\n                                    :\n                                    <></>\n                                }\n                            </>\n                        )\n                    }\n\n                    const selected_txt_post_blog = (selection, index) => {\n                        return (\n                            <>\n                                <div className={'selected_txt_post_blog'}>\n                                    <div className={'st_response'}>\n                                        {(selection?.category?.type == \"POST_SHORTCUT\") ?\n                                            <div className={'select_text_heading'}>Selected Text</div>\n                                            :\n                                            <div className={'select_text_heading'}>{selection?.category?.main_category}</div>\n                                        }\n                                        {/* <div className={'query'}>{selectedText}</div> */}\n                                        <div className={'query'}>{selection?.showText}</div> \n                                    </div>                            \n                                </div>\n                                <div className={'overall_icon_pack'}>\n                                    {(selection?.category?.type == \"POST_SHORTCUT\") ?\n                                        <div className=\"action_items\">{selection?.category?.main_category}{selection?.category?.sub_category && (\"/\"+\"\"+selection?.category?.sub_category)}</div>\n                                        :\n                                        <div className=\"action_items\">Response</div>\n                                    }\n\n                                    {/* Render formatted content without dangerouslySetInnerHTML */}\n                                    {/*<div className=\"ac_content\">\n                                        {(postpreConfig?.postpreResponse || \"\")} formattedResponseData\n                                    </div>*/}\n                                    {(selection?.category?.sub_category) && (selection?.category?.sub_category == \"Table\") ?\n                                        <div \n                                        className=\"ac_content\"\n                                        dangerouslySetInnerHTML={{ __html: selection?.formattedResponseData }}\n                                        >\n                                            {/*{(selection?.formattedResponseData || \"\")}*/}\n                                        </div> \n                                        :\n                                        <div className=\"ac_content\">\n                                            {(selection?.formattedResponseData || \"\")}\n                                        </div>\n                                    }\n\n                                    {iconItems(selection, index)}\n                                </div>\n                            </>                            \n                        )\n                    }\n\n                    async function copyFunc(text, index, ) {\n                        try {\n                            navigator.clipboard.writeText(text)\n                            .then(() => {\n                                setCopied(index);\n                                setTimeout(() => {\n                                    setCopied(null)\n                                }, 1000); //Hide the \"Copied\" message after 2secs\n                            })\n                            .catch((err) => {\n                                console.log(\"Failed to copy::\", err)\n                            });\n                        } catch (err) {\n                            console.log(\"Error in copy::\", err)\n                        }\n                    }\n\n                    const reloadFunc = async (selectionData, index) => {\n                        try {\n                            setPostShortcutLoading(true);\n\n                            let payload = {\n                                body: {\n                                    \"application_name\": \"TaskScribe\",\n                                    \"model_type\": generateToken?.model_type,\n                                    \"usecase\": selectionData?.res_useCase_option?.usecase,\n                                    \"question\": selectionData?.showText,\n                                    \"user_id\": isEmail,\n                                    // \"enable_automasking\": true\n                                },\n                                headers: {\n                                    \"Content-Type\": \"application/json\",\n                                    \"X-Authtoken\": generateToken?.authToken,\n                                    \"CF-ACCESS-CLIENT-ID\": settingreg?.CF_Access_Client_Id,\n                                    \"CF-ACCESS-CLIENT-SECRET\": settingreg?.CF_Access_Client_Secret\n                                },\n                                category: {\n                                    main_category: selectionData?.category?.main_category,\n                                    sub_category: (selectionData?.category?.sub_category)?selectionData?.category?.sub_category:\"\",\n                                    type:  selectionData?.category?.type\n                                }\n                            }\n\n                            if (selectionData?.res_useCase_option?.useCaseOption) {\n                                payload.body['usecase_options'] = selectionData?.res_useCase_option?.useCaseOption\n                            }\n                            let unique_uuid = generateUUID();\n                            const log_payload = createPayload(\n                                'Kustomer_AuthorAI_Reload_Option_Clicked',\n                                'Success'\n                            );\n                            let post_categoty_msg = \"Reload Query - \" + \" \" + selectionData?.showText;\n                            await logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: log_payload, UUID: unique_uuid, log_message: post_categoty_msg });\n                            postPreAutoSuggestApi(payload, isAuthuu)\n\n                        } catch (err) {\n                            console.log(\"Error in reloadFunc::\", err)\n                        }\n                    }\n\n                    const iconItems = (selectionData, index) => {\n                        return (\n                            <div className=\"iconItems\">\n                                <div \n                                    onClick={() => reloadFunc(selectionData, index)}\n                                ><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M3.42871 5.13485V10.2777M3.42871 10.2777H8.57157M3.42871 10.2777L7.40585 6.54057C8.58949 5.35893 10.1251 4.59397 11.7813 4.36095C13.4375 4.12794 15.1245 4.43948 16.5883 5.24865C18.052 6.05782 19.2131 7.32078 19.8967 8.84722C20.5802 10.3737 20.7492 12.0809 20.378 13.7117C20.0069 15.3425 19.1159 16.8086 17.8391 17.8889C16.5623 18.9693 14.9691 19.6054 13.2993 19.7015C11.6296 19.7976 9.97383 19.3485 8.58156 18.4217C7.18928 17.495 6.13591 16.1409 5.58014 14.5634\" stroke=\"#8217FF\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n</div>\n                                <div className={'copy_data'} onClick={() => copyFunc(selectionData?.originalData, index)}>\n                                    {(copied === index) && <span className={'copied-message-ai'}>Copied!</span>}\n                                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M6.00014 14.5714H5.143C4.68834 14.5714 4.2523 14.3908 3.93081 14.0693C3.60932 13.7478 3.42871 13.3118 3.42871 12.8571V5.14284C3.42871 4.68819 3.60932 4.25215 3.93081 3.93066C4.2523 3.60917 4.68834 3.42856 5.143 3.42856H12.8573C13.3119 3.42856 13.748 3.60917 14.0695 3.93066C14.391 4.25215 14.5716 4.68819 14.5716 5.14284V5.99999M11.143 9.42856H18.8573C19.8041 9.42856 20.5716 10.1961 20.5716 11.1428V18.8571C20.5716 19.8039 19.8041 20.5714 18.8573 20.5714H11.143C10.1962 20.5714 9.42871 19.8039 9.42871 18.8571V11.1428C9.42871 10.1961 10.1962 9.42856 11.143 9.42856Z\" stroke=\"#8217FF\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n\n                                </div>\n                                <div onClick={() => handleLikeClick(index, selectionData)}>\n                                    {(likedState[index]) ? <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"#8217FF\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M7.71442 20.5714H5.143C4.68834 20.5714 4.2523 20.3908 3.93081 20.0693C3.60932 19.7478 3.42871 19.3118 3.42871 18.8571V12.8571C3.42871 12.4025 3.60932 11.9664 3.93081 11.6449C4.2523 11.3235 4.68834 11.1428 5.143 11.1428H7.71442M13.7144 9.42856V5.99999C13.7144 5.318 13.4435 4.66395 12.9613 4.18171C12.479 3.69948 11.825 3.42856 11.143 3.42856L7.71442 11.1428V20.5714H17.383C17.7964 20.5761 18.1976 20.4312 18.5126 20.1634C18.8277 19.8957 19.0353 19.523 19.0973 19.1143L20.2801 11.4C20.3174 11.1543 20.3009 10.9034 20.2316 10.6648C20.1623 10.4261 20.0419 10.2054 19.8789 10.0179C19.7158 9.83033 19.5139 9.6805 19.2872 9.57874C19.0605 9.47699 18.8143 9.42574 18.5659 9.42856H13.7144Z\" stroke=\"#8217FF\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg> : <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M7.71442 20.5714H5.143C4.68834 20.5714 4.2523 20.3908 3.93081 20.0693C3.60932 19.7478 3.42871 19.3118 3.42871 18.8571V12.8571C3.42871 12.4025 3.60932 11.9664 3.93081 11.6449C4.2523 11.3235 4.68834 11.1428 5.143 11.1428H7.71442M13.7144 9.42856V5.99999C13.7144 5.318 13.4435 4.66395 12.9613 4.18171C12.479 3.69948 11.825 3.42856 11.143 3.42856L7.71442 11.1428V20.5714H17.383C17.7964 20.5761 18.1976 20.4312 18.5126 20.1634C18.8277 19.8957 19.0353 19.523 19.0973 19.1143L20.2801 11.4C20.3174 11.1543 20.3009 10.9034 20.2316 10.6648C20.1623 10.4261 20.0419 10.2054 19.8789 10.0179C19.7158 9.83033 19.5139 9.6805 19.2872 9.57874C19.0605 9.47699 18.8143 9.42574 18.5659 9.42856H13.7144Z\" stroke=\"#8217FF\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n}                                    \n                                </div>\n                                <div onClick = {() => handleDislikeClick(index, selectionData)}>\n                                    {(dislikedState[index]) ? <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"#8217FF\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M7.71442 3.42858H5.143C4.68834 3.42858 4.2523 3.6092 3.93081 3.93069C3.60932 4.25218 3.42871 4.68821 3.42871 5.14287V11.1429C3.42871 11.5975 3.60932 12.0336 3.93081 12.3551C4.2523 12.6765 4.68834 12.8572 5.143 12.8572H7.71442M13.7144 14.5714V18C13.7144 18.682 13.4435 19.3361 12.9613 19.8183C12.479 20.3005 11.825 20.5714 11.143 20.5714L7.71442 12.8572V3.42858H17.383C17.7964 3.42391 18.1976 3.56881 18.5126 3.83658C18.8277 4.10435 19.0353 4.47695 19.0973 4.88573L20.2801 12.6C20.3174 12.8457 20.3009 13.0966 20.2316 13.3352C20.1623 13.5739 20.0419 13.7946 19.8789 13.9821C19.7158 14.1697 19.5139 14.3195 19.2872 14.4213C19.0605 14.523 18.8143 14.5743 18.5659 14.5714H13.7144Z\" stroke=\"#8217FF\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n : <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M7.71442 3.42858H5.143C4.68834 3.42858 4.2523 3.6092 3.93081 3.93069C3.60932 4.25218 3.42871 4.68821 3.42871 5.14287V11.1429C3.42871 11.5975 3.60932 12.0336 3.93081 12.3551C4.2523 12.6765 4.68834 12.8572 5.143 12.8572H7.71442M13.7144 14.5714V18C13.7144 18.682 13.4435 19.3361 12.9613 19.8183C12.479 20.3005 11.825 20.5714 11.143 20.5714L7.71442 12.8572V3.42858H17.383C17.7964 3.42391 18.1976 3.56881 18.5126 3.83658C18.8277 4.10435 19.0353 4.47695 19.0973 4.88573L20.2801 12.6C20.3174 12.8457 20.3009 13.0966 20.2316 13.3352C20.1623 13.5739 20.0419 13.7946 19.8789 13.9821C19.7158 14.1697 19.5139 14.3195 19.2872 14.4213C19.0605 14.523 18.8143 14.5743 18.5659 14.5714H13.7144Z\" stroke=\"#8217FF\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n}\n                                </div>\n                                <div\n                                    onClick={() => {setPostOrPreOnloading({\n                                            ...postOrPreOnloading,  // Spread the current state\n                                            postOnloading: true,     // Update the specific field\n                                            textData: selectionData?.showText\n                                        }); \n                                        setPostShortcutLoading(!(postShortcutLoading))\n                                        // setPostShortcutLoading(false)}\n                                    }}\n                                >\n                                    <svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M3.75 2.25V5.25M2.25 3.75H5.25M4.5 12.75V15.75M3 14.25H6M9.75 2.25L11.4643 7.39286L15.75 9L11.4643 10.6071L9.75 15.75L8.03571 10.6071L3.75 9L8.03571 7.39286L9.75 2.25Z\" stroke=\"#8217FF\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n\n                                </div>\n                            </div>\n                        )\n                    }\n\n                    const authorAIDashboardComponents = () => {\n                        return (\n                            <>\n                                {!(isSelecting) && initialPage()}                                \n                                <div style={{ maxHeight: '310px', overflowY: 'auto' }}>\n                                    {/*{!(isSelecting) && initialPage()}*/}   \n                                    {/*{(selectedText != \"\") && selected_txt_post_blog()}*/}\n                                    {/* Render list of selected texts and responses */}\n                                    \n                                    <>\n                                        {isAutoLoading ?\n                                            <>\n                                                {\n                                                    (selections.length > 0 && selections.map((selection, index) => (\n                                                        <div key={index}>\n                                                            {selected_txt_post_blog(selection, index)}\n                                                            {/* Place scrollRef after the last response */}\n                                                            {/*index === selections.length - 1 && <div ref={scrollRef}></div>*/}\n                                                        </div>\n                                                    )))\n                                                }\n                                                \n                                                    <div id=\"spinner_bounce\" style={{ display: \"block\" }} ref={scrollRef}>\n                                                        <div className=\"spinner_bounce\" style={{ padding: \"0px 15px\" }}>\n                                                            <div className=\"bounce1\"></div>\n                                                            <div className=\"bounce2\"></div>\n                                                            <div className=\"bounce3\"></div>\n                                                        </div>\n                                                    </div>\n                                                \n                                            </>\n                                            : <>\n                                                {selections.length > 0 && selections.map((selection, index) => (\n                                                    <div key={index} ref={index === selections.length - 1 ? scrollRef : null}>\n                                                        {selected_txt_post_blog(selection, index)}\n                                                        {/* Place scrollRef after the last response */}\n                                                        {/*index === selections.length - 1 && <div ref={scrollRef}></div>*/}\n                                                    </div>\n                                                ))}\n                                            </>\n                                        }\n                                    </>                              \n                                </div> \n                                {(selectedText) &&\n                                    <>\n                                        {(postpreConfig?.postShortcuts?.length > 0) ?\n                                            <div className={'selected_txt_post_blog'}>\n                                                <div className={'st_response'}>\n                                                    <div className={'select_text_heading'}>Selected Text</div>\n                                                    {/* <div className={'query'}>{selectedText}</div> */}\n\n                                                    <div className={'query'}>{selectedText}</div>\n\n                                                </div>\n                                            </div>\n                                            :\n                                            <></>\n                                        }\n\n                                    </>\n                                }\n                                {((selectedText != \"\") || (textArea !== \"\") || (textArea == \"\") || (postOrPreOnloading?.textData)) && post_pre_select_box()}\n                            </>\n                            \n                        )\n                    }\n\n                    const selectingAI = async (type) => {\n                        try {\n                            setCheckboxType(type)\n                            if (type === 'promptogpt') {\n                                const payload = createPayload(\n                                    'Kustomer_PromptoGPT_ON',\n                                    'Success'\n                                );\n                                const promptogpt_on_LogMsg = \"PromptoGPT Turned ON\";\n                                if (settingreg) {\n                                    await logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: payload, log_message: promptogpt_on_LogMsg });\n                                }\n\n                            } else if (type == \"knowledge_assist\") {\n                                const payload = createPayload(\n                                    'Kustomer_KnowledgeAssist_ON',\n                                    'Success'\n                                );\n                                const knowledgeAssist_on_LogMsg = \"KnowledgeAssist Turned ON\";\n                                if (settingreg) {\n                                    await logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: payload, log_message: knowledgeAssist_on_LogMsg });\n                                }\n                            } else {\n                                const payload = createPayload(\n                                    'Kustomer_AuthorAI_ON',\n                                    'Success'\n                                );\n                                const knowledgeAssist_on_LogMsg = \"Kustomer_AuthorAI Turned ON\";\n                                if (settingreg) {\n                                    await logsAPI({ isAuthuu: isAuthuu, setting_token: settingreg?.setting_token, user_setting: settingreg?.settingResponse, PAYLOAD_FOR_EVENT: payload, log_message: knowledgeAssist_on_LogMsg });\n                                }\n                            }\n                        } catch (err) {\n                            console.log(\"Error in selectingAI::\", err)\n                        }\n                    }\n\n                    const middlePart = () => {\n                        return (\n                            <>\n                                {(isSettingStatus) && (generateToken?.promptoGPT_toggle || generateToken?.knowledgeAssist_toggle || generateToken?.authorAI_toggle) ?\n                                    <div className=\"latest_AI_types\">\n                                        {(generateToken?.promptoGPT_toggle === \"true\") &&\n                                            (((lastUserRes === 'Agent') || (channelType === \"email\")) ?\n                                                <div\n                                                    className={\"new_non_selected_prompts_notAllowed notAllowed\"}\n                                                // onClick={() => ((lastUserRes === 'Agent') || (channelType === \"email\")) ? console.log() : selectingAI(\"promptogpt\")}\n                                                >\n                                                    Prompt<sup>AI</sup>\n                                                </div> :\n                                                <div\n                                                    className={ischeckboxType == \"promptogpt\" ? \"new_selected_prompts\" : \"new_non_selected_prompts\"}\n                                                    onClick={() => selectingAI(\"promptogpt\")}\n                                                >\n                                                    Prompt<sup>AI</sup>\n                                                </div>\n                                            )\n                                        }\n                                        {(generateToken?.knowledgeAssist_toggle === \"true\") &&\n                                            <div\n                                                className={ischeckboxType == \"knowledge_assist\" ? \"new_selected_prompts\" : \"new_non_selected_prompts\"}\n                                                onClick={() => selectingAI(\"knowledge_assist\")}\n                                            >\n                                                Assist<sup>AI</sup>\n                                            </div>}\n                                        {(generateToken?.authorAI_toggle === \"true\") &&\n                                            <div\n                                                className={ischeckboxType == \"authorAI\" ? \"new_selected_prompts\" : \"new_non_selected_prompts\"}\n                                                onClick={() => selectingAI(\"authorAI\")}\n                                            >\n                                                Author<sup>AI</sup>\n                                            </div>}\n                                    </div>\n                                    :\n                                    <div style={{\n                                        display: \"flex\",\n                                        margin: \"10px 0px 5px\",\n                                        fontWeight: \"600\",\n                                        color: \"#000000\",\n                                        fontSize: \"14px\",\n                                        gap: \"8px\",\n                                        fontStyle: \"normal\",\n                                        alignItems: \"center\",\n                                        fontFamily: \"poppins\"\n                                    }}>\n                                        <span className={'loader-prompt'}></span>\n                                        <span>TaskGPT is loading...</span>\n                                    </div>\n\n\n                                }\n\n                            </>\n\n                        )\n                    }\n\n                    const dashboardComponent = () => {\n                        // let url=isAuthuu?.url_def;\n                        let url=isAuthuu?.dev_normal_url+\"/chatbot/floatingwidget?authToken=\";\n                        let token = generateToken?.client_authtoken;\n                        let end_url='&email='+isEmail+'&clientType=extension';\n                        let last_url=url+token+end_url;\n                        return (\n                            //<div style={{ padding: '15px' }}>\n                            <div style={{ padding: '0px' }}>\n                                {/*<img src='/images/logo.svg' /> TaskGPT*/}\n                                <div style={{\n                                    display: \"flex\", \n                                    justifyContent: \"space-between\",\n                                    alignItems: \"center\"\n                                    }}\n                                >\n                                    <div\n                                    style={{ \n                                        ...common_style,\n                                        margin: \"10px 0px\",\n                                        fontWeight: \"500\"\n                                    }}\n                                    >\n                                    Welcome, <span style={{ fontWeight: \"600\" }}>{name}</span>\n                                    </div>\n                                    <div style={{\n                                    textDecoration: \"underline\",\n                                    fontSize: \"15px\",\n                                    fontFamily: \"Poppins\",\n                                    color: \"#005EFF\",\n                                    cursor: \"pointer\",\n                                    }}\n                                    onClick={() => logoutBtn()}\n                                    >\n                                    Logout\n                                    </div>\n                                </div>\n                            \n                                {/*checkboxContent()*/}\n                                {middlePart()}\n                                <>\n                                    {(ischeckboxType == 'promptogpt') ?\n                                    <>\n                                        {(lastUserRes !== \"Agent\") ?  promptoGPTResponse()  : <></>}\n                                    </>\n                                    :\n                                    ((ischeckboxType == 'knowledge_assist') ?\n                                        // (generateToken?.client_authtoken) &&\n                                        <div style={{ margin: \"10px 0px 0px\" }}>\n                                        \n                                        <iframe\n                                            id=\"taskgpt\"\n                                            src={last_url}\n                                            // allow = \"clipboard-read; clipboard-write\"\n                                            style={{\n                                            height: '453px',\n                                            width: \"100%\"\n                                            }}                  \n                                        >\n\n                                        </iframe>\n\n                                        </div>\n                                        :\n                                        ((ischeckboxType === \"authorAI\") ? \n                                            <></>\n                                        :<></>\n                                        )\n                                    )\n                                    }\n                                </>\n                            </div >\n                        )\n                    }      \n\n                    const loginComponent = () => {\n                        return (\n                            <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', margin: \"12px 0px 0px\"}}>\n                                <div>\n                                    <div \n                                    style={{\n                                        margin: \"0px 0px 10px\",\n                                        fontFamily: \"poppins\",\n                                        fontSize: \"16px\",\n                                        fontWeight: \"600\",\n                                        color: \"#282829\"\n                                    }}\n                                    >\n                                    Email\n                                    </div>\n                                    <input\n                                    style={\n                                        {\n                                        padding: '10px',\n                                        border: '1px solid #B3B3B3',\n                                        background: '#FFFFFF',\n                                        borderRadius: '8px',\n                                        color: '#808080',\n                                        fontFamily: 'Poppins',\n                                        fontSize: '16px',\n                                        width: '100%',\n                                        outline: 'none'\n                                        }\n                                    }\n                                    id=\"email_id\"\n                                    value={isEmail}\n                                    readOnly\n                                    />\n                                </div>\n                                {!(isLoading) ?\n                                    <button\n                                    style={{\n                                        padding: \"12px 48px\",\n                                        borderRadius: \"40px\",\n                                        background: \" #005EFF\",\n                                        color: \"#FFFFFF\",\n                                        border: \"1px solid #005EFF\",\n                                        margin: \"21px 0px 11px\",\n                                        fontFamily: 'Poppins',\n                                        fontSize: '16px',\n                                        cursor: 'pointer'\n                                    }}\n                                    onClick={() => loginBtnAPI()}\n                                    >\n                                    Login\n                                    </button>\n                                    :\n                                    <button\n                                    style={{\n                                        display: \"flex\",\n                                        justifyContent: \"center\",\n                                        gap: \"8px\",\n                                        alignItems: \"center\",\n                                        padding: \"12px 48px\",\n                                        borderRadius: \"40px\",\n                                        background: \" #005EFF\",\n                                        color: \"#FFFFFF\",\n                                        border: \"1px solid #005EFF\",\n                                        margin: \"21px 0px 11px\",\n                                        fontFamily: 'Poppins',\n                                        fontSize: '16px',\n                                        cursor: 'not-allowed'\n                                    }}\n                                    disabled\n                                    >\n                                    <span className={'loader'}></span>  Loading...\n                                    </button>\n\n                                }\n                            </div >\n                        )\n                    }\n\n                    const footerPart = () => {\n                        const currentYear = new Date().getFullYear();\n                        return (\n                            <div style={{\n                            fontSize: \"14px\",\n                            fontWeight: \"500\",\n                            fontFamily: \"poppins\",\n                            margin: \"10px 0px\",\n                            textAlign: \"center\",\n                            color: \"#000000\"\n                            }}\n                            >\n                            <p>Version: 2.0.0 | TaskUs @ {currentYear} | <a style={{color: \"#005EFF\", textDecoration: \"underline\"}} href=\"https://www.taskus.com/security/\" target=\"_blank\">Security</a></p>\n                            </div>\n                        )\n                    }                    \n\n                    return (\n                        // <div style={{padding: \"10px\"}}>\n                        <div style={{padding: \"5px\"}}>\n                            {(!(isSettingStatus)) && loginComponent()}\n                            {((isLoggedStatus) && (isSettingStatus)) && dashboardComponent()}\n                            {((isLoggedStatus) && (isSettingStatus) && (ischeckboxType == \"authorAI\")) && \n                                <>\n                                    {authorAIDashboardComponents()}\n                                    {pre_post_textarea()}\n                                </>\n                            \n                            }\n                            {footerPart()}                            \n                            <style>{`\n  .actionBtn{\n    width:100%;\n    height: 40px;\n    color:white;\n  }\n    \n  .actionBtn:hover{\n    background-color: pink !important;\n  }\n\n  .loader {\n    border: 3px solid #f3f3f3;\n    border-radius: 50%;\n    border-top: 3px dashed rgb(255, 255, 255);\n    border-right: 3px dashed rgb(255, 255, 255);\n    border-bottom: 3px dashed rgb(255, 255, 255);\n    border-left: 3px dashed rgb(255, 255, 255);\n    width: 20px;\n    height: 20px;\n    -webkit-animation: spin 2s linear infinite;\n    animation: spin 2s linear infinite;\n  }\n\n  .response-box {\n    position: relative;\n    margin: 10px 0px;\n    border: 1px solid;\n    background: #D3D3D3;\n    text-align: justify;\n    cursor: pointer;\n    padding: 7px 10px;\n    background: #FFFFFF;\n    border: 1px solid #B3B3B3;\n    border-radius: 8px;\n    color: #282829;\n    font-family: \"poppins\";\n    font-weight: 400;\n    font-size: 13px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    transition: background-color 0.2s ease-in-out;\n  }\n\n  .response-box:hover {\n    background-color: #ebebeb;\n  }\n\n  .loader-prompt {\n    border: 3px solid #000000;\n    border-radius: 50%;\n    border-top: 3px dashed #000000;\n    border-right: 3px dashed #000000;\n    border-bottom: 3px dashed #000000;\n    border-left: 3px dashed #000000;\n    width: 16px;\n    height: 16px;\n    -webkit-animation: spin 2s linear infinite;\n    animation: spin 2s linear infinite;\n  }\n\n  .copied-message {\n    position: absolute;\n    top: -20px;\n    right: 151px;\n    background-color: #005EFF;\n    color: white;\n    padding: 4px 8px;\n    font-size: 12px;\n    font-family: \"poppins\";\n    border-radius: 5px;\n    animation: fadeOut 2s forwards;\n  }\n\n  @keyframes fadeOut {\n    0% {\n      opacity: 1;\n    }\n    100% {\n      opacity: 0;\n    }\n  }\n\n  @-webkit-keyframes spin {\n    0% { -webkit-transform: rotate(0deg); }\n    100% { -webkit-transform: rotate(360deg); }\n  }\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n\n  .write_paste_selected_txt {       \n        padding: 8px 16px 8px 16px;\n        border-radius: 56px;\n        text-align: center;\n        margin: 10px 25px 5px;\n        font-family: poppins;\n        font-weight: 500;\n    }\n    \n    .write_paste_selected_txt,\n    .active_comp {\n        color: #8217FF;\n        background: #F3E8FF;\n        border: 1px solid #F3E8FF;\n    }\n\n    .post_shortcut_list {\n        display: flex;\n        flex-direction: column;\n        border: 1px solid #C694FF;\n        border-radius: 8px;\n        font-size: 13px;\n        font-weight: 500;\n        font-family: poppins;\n        background: #FFFFFF;\n    }\n\n    .preShortcutLoadingv {\n        background: #F6F6F6;\n        padding: 5px;\n        margin: 10px 0px;\n        width: 100%;\n    }\n\n    .pre_shortcut_list {\n        display: flex;\n        flex-direction: column;\n        border: 1px solid #C694FF;\n        border-radius: 8px;\n        font-size: 13px;\n        font-weight: 600;\n        font-family: poppins;\n        background: #FFFFFF;\n        width: 72%;\n        margin: 5px auto;\n    }\n\n    .ps_single_item {\n        border-bottom: 1px solid #F2F2F2;\n        display: flex;\n        padding: 12px 6px;\n        justify-content: space-between;\n        align-items: center;\n        cursor: default;\n        /*display: grid;\n        column-gap: 27px;*/\n        grid-template-columns: auto auto;\n    }\n\n    .ps_single_item:first-child {\n        border-top-left-radius: 8px;\n        border-top-right-radius: 8px;\n    }\n\n    .ps_single_item:last-child {\n        border-bottom-left-radius: 8px;\n        border-bottom-right-radius: 8px;\n    }\n\n    .ps_single_item:hover {\n        border-bottom: 1px solid #F2F2F2;\n        /*display: flex;*/\n        padding: 12px 6px;\n        justify-content: space-between;\n        align-items: center;\n        background-color: #F3E8FF;\n    }\n\n    .pr_single_item {\n        border-bottom: 1px solid #F2F2F2;\n        display: flex;\n        padding: 12px 6px;\n        align-items: center;\n        cursor: default;\n        gap: 10px;\n    }\n\n    .pr_single_item:first-child {\n        border-top-left-radius: 8px;\n        border-top-right-radius: 8px;\n    }\n\n    .pr_single_item:last-child {\n        border-bottom-left-radius: 8px;\n        border-bottom-right-radius: 8px;\n    }\n\n    .pr_single_item:hover {\n        border-bottom: 1px solid #F2F2F2;\n        display: flex;\n        padding: 12px 7px;\n        align-items: center;\n        background-color: #F3E8FF;\n    }\n\n    .post_shortcut_subcategory {\n        /*display: flex;*/\n        align-items: center;\n        gap: 4px;\n        /*display: grid;*/\n        column-gap: 10px;\n        grid-template-columns: auto auto;\n        align-items: center;\n    }\n\n    .ps_subcategory_item {\n        color: #282829;\n        font-weight: 500;\n        border: 1px solid #282829;\n        border-radius: 5px;\n        padding: 4px 8px;\n        width: 100%;\n        /* height: 100%; */\n        text-align: center;\n    }\n\n    .ps_subcategory_item:hover {\n        color: #8217FF;\n        font-weight: 500;\n        border: 1px solid #8217FF;\n        border-radius: 5px;\n        padding: 4px 8px;\n        width: 100%;\n        /* height: 100%; */\n        text-align: center;\n    }\n\n    .ps_main_list_names {\n        color: #282829\n    }\n\n    .pre_ta_parent {\n        background: #F9FAFB;\n        border-radius: 8px;\n        display: inline-flex;\n        width: 95%;\n        border: 1px solid #E6E6E6;\n        overflow: hidden;\n        margin: 8px 8px;\n    }\n\n    .pre_textarea {\n        width: 100%;\n        display: flex;\n    }\n\n    .textarea_input {\n        padding: 10px;\n        height: 74px;\n        width: 100%;\n        outline: none;\n        border: none;\n        resize: none;\n        border-radius: 8px;\n        background: #F9FAFB;\n    }\n\n    .textarea_input::placeholder {\n        color: #B3B3B3;\n        font-size: 12px;\n    }\n\n    .magic_icon {\n        padding: 10px;\n    }\n\n    .selected_txt_post_blog {\n        display: flex;\n        flex-direction: column;\n        gap: 20px;\n        background: #F6F6F6;\n        padding: 10px;\n    }\n\n    .st_response {\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n        padding: 0px 10px;\n        font-size: 14px;\n        font-family: poppins;\n        color: #282829;\n        font-weight: 500;\n    }\n\n    .select_text_heading {\n        color: #8217FF;\n        background: #F3E8FF;\n        /* width: 40%; */\n        width: 100%;\n        padding: 4px;\n        border-radius: 4px;\n        /*text-align: center;*/\n    }\n\n    .query {\n        text-align: justify;\n    }\n\n    .overall_icon_pack {\n        font-size: 14px;\n        font-family: poppins;\n        font-weight: 500;\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n        padding: 15px 10px 10px;\n    } \n\n    .action_items {\n        color: #8217FF;\n        background: #F3E8FF;\n        /*width: 66%;*/\n        padding: 6px;\n        border-radius: 4px;\n        /*text-align: center;*/\n    }\n\n    .ac_content {\n        text-align: justify;\n        padding: 0 5px;\n        white-space: pre-wrap; \n    }\n\n    .iconItems {\n        display: flex;\n        gap: 10px;\n        cursor: pointer;\n        align-items: center;\n        padding: 0px 5px;\n    }\n\n    .postShortcutLoadingv {\n        background: #F6F6F6;\n        margin: 10px 0px;\n        padding: 5px;\n    }\n\n    .copy_data {\n        position: relative;\n    }\n\n    .copied-message-ai {\n        background: black;\n        color: white;\n        padding: 1.5px 5px;\n        position: absolute;\n        bottom: 30px;\n        left: -11px;\n        border-radius: 4px;\n        font-size: 12px;\n        font-family: poppins;\n        text-align: center;        \n        animation: fadeOut 2s forwards;\n    }\n\n    .selected_pre_option {\n        display: flex;\n        /* gap: 7px; */\n        justify-content: space-between;\n        background: red;\n        padding: 8px 15px;\n        margin: 0px 10px;\n        border-radius: 8px;\n        background: #F3E8FF;\n        color: #282829;\n        font-weight: 500;\n        font-family: poppins;\n        align-items: center;\n    }\n\n    .spinner_bounce > div {\n        width: 10px;\n        height: 10px;\n        background-color: #333;\n        border-radius: 100%;\n        display: inline-block;\n        -webkit-animation: bounceDelay 1.4s infinite ease-in-out both;\n        animation: bounceDelay 1.4s infinite ease-in-out both;\n    }\n\n    .spinner_bounce .bounce1 {\n        -webkit-animation-delay: -0.32s;\n        animation-delay: -0.32s;\n    }\n\n    .spinner_bounce .bounce2 {\n        -webkit-animation-delay: -0.16s;\n        animation-delay: -0.16s;\n    }\n\n    @-webkit-keyframes bounceDelay {\n        0%,\n        80%,\n        100% {\n            -webkit-transform: scale(0);\n        }\n        40% {\n            -webkit-transform: scale(1);\n        }\n    }\n\n    @keyframes bounceDelay {\n        0%,\n        80%,\n        100% {\n            -webkit-transform: scale(0);\n            transform: scale(0);\n        }\n        40% {\n            -webkit-transform: scale(1);\n            transform: scale(1);\n        }\n    }\n\n    .latest_AI_types {\n        display: flex;\n        justify-content: space-between;\n        padding: 5px;\n        align-items: center;\n        font-family: \"poppins\";\n        font-size: 16px;\n        gap: 10px;\n    }\n\n    .new_non_selected_prompts {\n        border: 1px solid #CCCCCC;\n        border-radius: 30px;\n        background: #F9FAFB;\n        width: 106px;\n        height: 32px;\n        text-align: center;\n        padding: 6px 12px;\n        color: #282829;\n        font-weight: 500;\n        cursor: pointer;\n    }\n\n    .new_non_selected_prompts:hover {\n        border: 1px solid #8217FF;\n        border-radius: 30px;\n        background: #F3E8FF;\n        width: 106px;\n        height: 32px;\n        text-align: center;\n        padding: 6px 12px;\n        color: #282829;\n        font-weight: 500;\n        cursor: pointer;\n    }\n\n    .new_selected_prompts {\n        border: 1px solid #8217FF;\n        border-radius: 30px;\n        background: #F3E8FF;\n        width: 106px;\n        height: 32px;\n        text-align: center;\n        padding: 6px 12px;\n        color: #282829;\n        font-weight: 500;\n        cursor: pointer;\n    }\n\n    .notAllowed {\n        cursor: not-allowed;\n    }\n\n    .promptoWritingStyleOptions {\n        display: flex;\n        justify-content: space-between;\n        width: 300px;\n        margin: 10px;\n        font-size: 14px;\n        font-weight: 500;\n        font-family: poppins;\n    }\n\n    .tone_style_content {\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n    }\n\n    .tone_lists {\n        width: 140px;\n        height: 34px;\n        border-radius: 4px;\n    }\n\n    .new_non_selected_prompts_notAllowed {\n        border: 1px solid #CCCCCC;\n        border-radius: 30px;\n        background: #F9FAFB;\n        width: 106px;\n        height: 32px;\n        text-align: center;\n        padding: 6px 12px;\n        color: #282829;\n        font-weight: 500;\n        cursor: not-allowed;\n    }\n\n    .dropdown-container {\n        position: relative;\n        width: 150px; /* Adjust as needed */\n    }\n\n    .dropdown-selected {\n        padding: 10px;\n        /* border: 1px solid #ccc; */\n        border: 1px solid #8217FF;\n        cursor: pointer;\n        background-color: #fff;\n        /*border-radius: 5px;*/\n        border-top-left-radius: 5px;\n        border-top-right-radius: 5px;\n        display: flex;\n        gap: 10px;\n        align-items: center\n    }\n\n    .dropdown-options {\n        position: absolute;\n        top: 100%;\n        left: 0;\n        width: 100%;\n        border: 1px solid #ccc;\n        background-color: #fff;\n        z-index: 1000;\n        border: 1px solid #8217FF;\n    }\n\n    .dropdown-option {\n        padding: 10px;\n        cursor: pointer;\n        border-bottom: 1px solid #F3E8FF;\n    }\n\n    .dropdown-option:last-child {\n        border-bottom-left-radius: 5px;\n        border-bottom-right-radius: 5px;\n    }\n\n    .dropdown-option:hover {\n        background-color: #F3E8FF;\n    }\n\n\n`}</style>\n                        </div>\n                    )\n                });\n                <AuthorAIComponent \n                    conversation={conversation}\n                    appSettings={appSettings}\n                />     \n    \n    }\n        \n    ",
      "context": "smartbar-card",
      "resource": "conversation",
      "meta": {
        "displayName": "TaskGPT",
        "icon": "earth",
        "state": "open"
      }
    }
  ]
}